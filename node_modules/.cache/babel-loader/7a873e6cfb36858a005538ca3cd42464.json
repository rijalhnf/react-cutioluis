{"ast":null,"code":"import * as React from 'react'; // recursion (flat tree structure)\n\nfunction fillRecords(list, record, indent, childrenColumnName, expandedKeys, getRowKey, index) {\n  list.push({\n    record: record,\n    indent: indent,\n    index: index\n  });\n  var key = getRowKey(record);\n  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\n\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\n    // expanded state, flat record\n    for (var i = 0; i < record[childrenColumnName].length; i += 1) {\n      fillRecords(list, record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey, i);\n    }\n  }\n}\n/**\n * flat tree data on expanded state\n *\n * @export\n * @template T\n * @param {*} data : table data\n * @param {string} childrenColumnName : 指定树形结构的列名\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\n * @returns flattened data\n */\n\n\nexport default function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = React.useMemo(function () {\n    if (expandedKeys !== null && expandedKeys !== void 0 && expandedKeys.size) {\n      var list = []; // collect flattened record\n\n      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\n        var record = data[i]; // using array.push or spread operator may cause \"Maximum call stack size exceeded\" exception if array size is big enough.\n\n        fillRecords(list, record, 0, childrenColumnName, expandedKeys, getRowKey, i);\n      }\n\n      return list;\n    }\n\n    return data === null || data === void 0 ? void 0 : data.map(function (item, index) {\n      return {\n        record: item,\n        indent: 0,\n        index: index\n      };\n    });\n  }, [data, childrenColumnName, expandedKeys, getRowKey]);\n  return arr;\n}","map":{"version":3,"names":["React","fillRecords","list","record","indent","childrenColumnName","expandedKeys","getRowKey","index","push","key","expanded","has","Array","isArray","i","length","useFlattenRecords","data","arr","useMemo","size","map","item"],"sources":["/Users/joji/Documents/CODE/React/react-cutioluis/node_modules/rc-table/es/hooks/useFlattenRecords.js"],"sourcesContent":["import * as React from 'react';\n// recursion (flat tree structure)\nfunction fillRecords(list, record, indent, childrenColumnName, expandedKeys, getRowKey, index) {\n  list.push({\n    record: record,\n    indent: indent,\n    index: index\n  });\n  var key = getRowKey(record);\n  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\n    // expanded state, flat record\n    for (var i = 0; i < record[childrenColumnName].length; i += 1) {\n      fillRecords(list, record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey, i);\n    }\n  }\n}\n/**\n * flat tree data on expanded state\n *\n * @export\n * @template T\n * @param {*} data : table data\n * @param {string} childrenColumnName : 指定树形结构的列名\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\n * @returns flattened data\n */\nexport default function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = React.useMemo(function () {\n    if (expandedKeys !== null && expandedKeys !== void 0 && expandedKeys.size) {\n      var list = [];\n\n      // collect flattened record\n      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\n        var record = data[i];\n\n        // using array.push or spread operator may cause \"Maximum call stack size exceeded\" exception if array size is big enough.\n        fillRecords(list, record, 0, childrenColumnName, expandedKeys, getRowKey, i);\n      }\n      return list;\n    }\n    return data === null || data === void 0 ? void 0 : data.map(function (item, index) {\n      return {\n        record: item,\n        indent: 0,\n        index: index\n      };\n    });\n  }, [data, childrenColumnName, expandedKeys, getRowKey]);\n  return arr;\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,kBAA3C,EAA+DC,YAA/D,EAA6EC,SAA7E,EAAwFC,KAAxF,EAA+F;EAC7FN,IAAI,CAACO,IAAL,CAAU;IACRN,MAAM,EAAEA,MADA;IAERC,MAAM,EAAEA,MAFA;IAGRI,KAAK,EAAEA;EAHC,CAAV;EAKA,IAAIE,GAAG,GAAGH,SAAS,CAACJ,MAAD,CAAnB;EACA,IAAIQ,QAAQ,GAAGL,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACM,GAAb,CAAiBF,GAAjB,CAA3E;;EACA,IAAIP,MAAM,IAAIU,KAAK,CAACC,OAAN,CAAcX,MAAM,CAACE,kBAAD,CAApB,CAAV,IAAuDM,QAA3D,EAAqE;IACnE;IACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,MAAM,CAACE,kBAAD,CAAN,CAA2BW,MAA/C,EAAuDD,CAAC,IAAI,CAA5D,EAA+D;MAC7Dd,WAAW,CAACC,IAAD,EAAOC,MAAM,CAACE,kBAAD,CAAN,CAA2BU,CAA3B,CAAP,EAAsCX,MAAM,GAAG,CAA/C,EAAkDC,kBAAlD,EAAsEC,YAAtE,EAAoFC,SAApF,EAA+FQ,CAA/F,CAAX;IACD;EACF;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASE,iBAAT,CAA2BC,IAA3B,EAAiCb,kBAAjC,EAAqDC,YAArD,EAAmEC,SAAnE,EAA8E;EAC3F,IAAIY,GAAG,GAAGnB,KAAK,CAACoB,OAAN,CAAc,YAAY;IAClC,IAAId,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,IAAoDA,YAAY,CAACe,IAArE,EAA2E;MACzE,IAAInB,IAAI,GAAG,EAAX,CADyE,CAGzE;;MACA,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIG,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACF,MAArD,CAAjB,EAA+ED,CAAC,IAAI,CAApF,EAAuF;QACrF,IAAIZ,MAAM,GAAGe,IAAI,CAACH,CAAD,CAAjB,CADqF,CAGrF;;QACAd,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe,CAAf,EAAkBE,kBAAlB,EAAsCC,YAAtC,EAAoDC,SAApD,EAA+DQ,CAA/D,CAAX;MACD;;MACD,OAAOb,IAAP;IACD;;IACD,OAAOgB,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACI,GAAL,CAAS,UAAUC,IAAV,EAAgBf,KAAhB,EAAuB;MACjF,OAAO;QACLL,MAAM,EAAEoB,IADH;QAELnB,MAAM,EAAE,CAFH;QAGLI,KAAK,EAAEA;MAHF,CAAP;IAKD,CANkD,CAAnD;EAOD,CApBS,EAoBP,CAACU,IAAD,EAAOb,kBAAP,EAA2BC,YAA3B,EAAyCC,SAAzC,CApBO,CAAV;EAqBA,OAAOY,GAAP;AACD"},"metadata":{},"sourceType":"module"}