{"ast":null,"code":"const t = t => \"object\" == typeof t && null != t && 1 === t.nodeType,\n      e = (t, e) => (!e || \"hidden\" !== t) && \"visible\" !== t && \"clip\" !== t,\n      n = (t, n) => {\n  if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {\n    const o = getComputedStyle(t, null);\n    return e(o.overflowY, n) || e(o.overflowX, n) || (t => {\n      const e = (t => {\n        if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;\n\n        try {\n          return t.ownerDocument.defaultView.frameElement;\n        } catch (t) {\n          return null;\n        }\n      })(t);\n\n      return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);\n    })(t);\n  }\n\n  return !1;\n},\n      o = (t, e, n, o, l, r, i, s) => r < t && i > e || r > t && i < e ? 0 : r <= t && s <= n || i >= e && s >= n ? r - t - o : i > e && s < n || r < t && s > n ? i - e + l : 0,\n      l = t => {\n  const e = t.parentElement;\n  return null == e ? t.getRootNode().host || null : e;\n},\n      r = (e, r) => {\n  var i, s, d, h;\n  if (\"undefined\" == typeof document) return [];\n  const {\n    scrollMode: c,\n    block: f,\n    inline: u,\n    boundary: a,\n    skipOverflowHiddenElements: g\n  } = r,\n        p = \"function\" == typeof a ? a : t => t !== a;\n  if (!t(e)) throw new TypeError(\"Invalid target\");\n  const m = document.scrollingElement || document.documentElement,\n        w = [];\n  let W = e;\n\n  for (; t(W) && p(W);) {\n    if (W = l(W), W === m) {\n      w.push(W);\n      break;\n    }\n\n    null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);\n  }\n\n  const b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth,\n        H = null != (h = null == (d = window.visualViewport) ? void 0 : d.height) ? h : innerHeight,\n        {\n    scrollX: y,\n    scrollY: M\n  } = window,\n        {\n    height: v,\n    width: E,\n    top: x,\n    right: C,\n    bottom: I,\n    left: R\n  } = e.getBoundingClientRect(),\n        {\n    top: T,\n    right: B,\n    bottom: F,\n    left: V\n  } = (t => {\n    const e = window.getComputedStyle(t);\n    return {\n      top: parseFloat(e.scrollMarginTop) || 0,\n      right: parseFloat(e.scrollMarginRight) || 0,\n      bottom: parseFloat(e.scrollMarginBottom) || 0,\n      left: parseFloat(e.scrollMarginLeft) || 0\n    };\n  })(e);\n\n  let k = \"start\" === f || \"nearest\" === f ? x - T : \"end\" === f ? I + F : x + v / 2 - T + F,\n      D = \"center\" === u ? R + E / 2 - V + B : \"end\" === u ? C + B : R - V;\n  const L = [];\n\n  for (let t = 0; t < w.length; t++) {\n    const e = w[t],\n          {\n      height: n,\n      width: l,\n      top: r,\n      right: i,\n      bottom: s,\n      left: d\n    } = e.getBoundingClientRect();\n    if (\"if-needed\" === c && x >= 0 && R >= 0 && I <= H && C <= b && x >= r && I <= s && R >= d && C <= i) return L;\n    const h = getComputedStyle(e),\n          a = parseInt(h.borderLeftWidth, 10),\n          g = parseInt(h.borderTopWidth, 10),\n          p = parseInt(h.borderRightWidth, 10),\n          W = parseInt(h.borderBottomWidth, 10);\n    let T = 0,\n        B = 0;\n    const F = \"offsetWidth\" in e ? e.offsetWidth - e.clientWidth - a - p : 0,\n          V = \"offsetHeight\" in e ? e.offsetHeight - e.clientHeight - g - W : 0,\n          S = \"offsetWidth\" in e ? 0 === e.offsetWidth ? 0 : l / e.offsetWidth : 0,\n          X = \"offsetHeight\" in e ? 0 === e.offsetHeight ? 0 : n / e.offsetHeight : 0;\n    if (m === e) T = \"start\" === f ? k : \"end\" === f ? k - H : \"nearest\" === f ? o(M, M + H, H, g, W, M + k, M + k + v, v) : k - H / 2, B = \"start\" === u ? D : \"center\" === u ? D - b / 2 : \"end\" === u ? D - b : o(y, y + b, b, a, p, y + D, y + D + E, E), T = Math.max(0, T + M), B = Math.max(0, B + y);else {\n      T = \"start\" === f ? k - r - g : \"end\" === f ? k - s + W + V : \"nearest\" === f ? o(r, s, n, g, W + V, k, k + v, v) : k - (r + n / 2) + V / 2, B = \"start\" === u ? D - d - a : \"center\" === u ? D - (d + l / 2) + F / 2 : \"end\" === u ? D - i + p + F : o(d, i, l, a, p + F, D, D + E, E);\n      const {\n        scrollLeft: t,\n        scrollTop: h\n      } = e;\n      T = 0 === X ? 0 : Math.max(0, Math.min(h + T / X, e.scrollHeight - n / X + V)), B = 0 === S ? 0 : Math.max(0, Math.min(t + B / S, e.scrollWidth - l / S + F)), k += h - T, D += t - B;\n    }\n    L.push({\n      el: e,\n      top: T,\n      left: B\n    });\n  }\n\n  return L;\n};\n\nexport { r as compute };","map":{"version":3,"mappings":"AA6EA,MAAMA,IAAaC,KACH,mBAAPA,CAAO,IAAkB,QAANA,CAAZ,IAA0C,MAAhBA,EAAGC,QAD7C;AAAA,MAGMC,IAAcA,CAClBC,CADkBD,EAElBE,CAFkBF,KAElBE,EAEIA,CAFJA,IAE+C,aAAbD,CAFlCC,KAMoB,cAAbD,CAAa,IAA0B,WAAbA,CAXnC;AAAA,MAqCME,IAAeA,CAACL,CAADK,EAAcD,CAAdC,KAAcD;EACjC,IAAIJ,EAAGM,YAAHN,GAAkBA,EAAGO,YAArBP,IAAqCA,EAAGQ,WAAHR,GAAiBA,EAAGS,WAA7D,EAA0E;IAClE,UAAQC,iBAAiBV,CAAjBU,EAAqB,IAArBA,CAAR;IAEJ,SAAYC,EAAMC,SAAlBV,EAA6BE,CAA7BF,KACAA,EAAYS,EAAME,SAAlBX,EAA6BE,CAA7BF,CADAA,IAfmBF;MACjB,UAbiBA;QACvB,KAAKA,EAAGc,aAAR,IAAQA,CAAkBd,EAAGc,aAAHd,CAAiBe,WAA3C,EACS;;QAGL;UACK,SAAGD,aAAHd,CAAiBe,WAAjBf,CAA6BgB,YAA7B;QAA6BA,CADlC,CACkCA,OAC7BC,CAD6BD,EAC7BC;UACA;QACT;MAAA,CATuBjB,EAaOA,CAbPA,CAajB;;MACN,SAAKkB,CAAL,KAKEA,EAAMZ,YAANY,GAAqBlB,EAAGO,YAAxBW,IAAwCA,EAAMV,WAANU,GAAoBlB,EAAGS,WALjE;IAKiE,CAP1CT,EAiBHA,CAjBGA,CAenB;EAMG;;EAAA;AAAA,CA/CT;AAAA,MA0DMmB,IAAeA,CACnBC,CADmBD,EAEnBE,CAFmBF,EAGnBG,CAHmBH,EAInBI,CAJmBJ,EAKnBK,CALmBL,EAMnBM,CANmBN,EAOnBO,CAPmBP,EAQnBQ,CARmBR,KA8BhBM,IAAmBL,CAAnBK,IACCC,IAAiBL,CADlBI,IAEAA,IAAmBL,CAAnBK,IAAyCC,IAAiBL,CAF1DI,GAIM,CAJNA,GA+CAA,KAAoBL,CAApBK,IAA0CE,KAAeL,CAAzDG,IACAC,KAAkBL,CAAlBK,IAAsCC,KAAeL,CADrDG,GAGMA,IAAmBL,CAAnBK,GAAwCF,CAH9CE,GA+CAC,IAAiBL,CAAjBK,IAAqCC,IAAcL,CAAnDI,IACAD,IAAmBL,CAAnBK,IAAyCE,IAAcL,CADvDI,GAGMA,IAAiBL,CAAjBK,GAAoCF,CAH1CE,GAMI,CA5LT;AAAA,MA+LME,IAAoBC;EACxB,MAAMC,IAASD,EAAQE,aAAvB;EACA,OAAc,QAAVD,CAAU,GACJD,EAAQG,WAARH,GAAqCI,IAArCJ,IAA6C,IADzC,GAGPC,CAHP;AAGO,CApMT;AAAA,MAkNaI,IAAUA,CAACC,CAADD,EAAkBE,CAAlBF,KAAkBE;EA/RzC;EAgSM,IAAoB,sBAAbC,QAAP,EAEF,OAAO,EAAP;EAGF;IAAMC,YAAEA,CAAR;IAAoBC,QAApB;IAAoBC,QAAOA,CAA3B;IAAmCC,WAAnC;IAAmCrC,4BAAUA;EAA7C,IACEgC,CADF;EAAA,MAKMM,IACgB,qBAAbD,CAAa,GAAaA,CAAb,GAAyBE,KAAcA,MAASF,CANtE;EAQI,KAAC1C,EAAUoC,CAAVpC,CAAD,EACI,UAAI6C,SAAJ,CAAc,gBAAd;EAIF,UAAmBP,SAASQ,gBAATR,IAA6BA,SAASS,eAAzD;EAAA,MAGAC,IAAoB,EAHpB;EAIN,IAAIC,IAAyBb,CAA7B;;EACA,OAAOpC,EAAUiD,CAAVjD,KAAqB2C,EAAcM,CAAdN,CAA5B,GAAmD;IAKjD,IAHAM,IAASpB,EAAiBoB,CAAjBpB,CAAToB,EAGIA,MAAWH,CAAf,EAAiC;MAC/BE,EAAOE,IAAPF,CAAYC,CAAZD;MACA;IAKU;;IAAA,QAAVC,CAAU,IACVA,MAAWX,SAASa,IADV,IAEV7C,EAAa2C,CAAb3C,CAFU,IAEG2C,CACZ3C,EAAagC,SAASS,eAAtBzC,CAHS,IASE,QAAV2C,CAAU,IAAQ3C,EAAa2C,CAAb3C,EAAqBD,CAArBC,CAAR,IACZ0C,EAAOE,IAAPF,CAAYC,CAAZD,CAVU;EAmBd;;EAAA,MAAMI,IAAgB,iCAAOC,cAAP,IAAOA,KAAP,MAAuBC,KAAvB,IAAgCC,CAAhC,GAAgCC,UAAtD;EAAA,MACMC,IAAiB,iCAAOJ,cAAP,IAAOA,KAAP,MAAuBK,MAAvB,IAAiCC,CAAjC,GAAiCC,WADxD;EAAA,MACwDA;IAClDC,SAAEA,CADgDD;IACvCE;EADuCF,IAC3BG,MAF7B;EAAA,MAE6BA;IAG3BL,QAAQM,CAHmBD;IAI3BT,OAAOW,CAJoBF;IAK3BG,KAAKC,CALsBJ;IAM3BK,OAAOC,CANoBN;IAO3BO,QAAQC,CAPmBR;IAQ3BS,MAAMC;EARqBV,IASzB3B,EAAOsC,qBAAPtC,EAXJ;EAAA,MAWWsC;IAETR,KAAKS,CAFID;IAGTN,OAAOQ,CAHEF;IAITJ,QAAQO,CAJCH;IAKTF,MAAMM;EALGJ,IA7EatC;IAClB,UAAgB2B,OAAOpD,gBAAPoD,CAAwB3B,CAAxB2B,CAAhB;IACC;MACLG,KAAKa,WAAWC,EAAcC,eAAzBF,KAA6C,CAD7C;MAELX,OAAOW,WAAWC,EAAcE,iBAAzBH,KAA+C,CAFjD;MAGLT,QAAQS,WAAWC,EAAcG,kBAAzBJ,KAAgD,CAHnD;MAILP,MAAMO,WAAWC,EAAcI,gBAAzBL,KAA8C;IAJ/C;EAKP,CAPwB3C,EAmFHA,CAnFGA,CAkExB;;EAoBA,IAAIiD,IACQ,YAAV7C,CAAU,IAAqB,cAAVA,CAAX,GACN2B,IAAYQ,CADN,GAEI,UAAVnC,CAAU,GACV+B,IAAeM,CADL,GAEVV,IAAYH,IAAe,CAA3BG,GAA+BQ,CAA/BR,GAA2CU,CALjD;EAAA,IAMIS,IACS,aAAX7C,CAAW,GACPgC,IAAaR,IAAc,CAA3BQ,GAA+BK,CAA/BL,GAA4CG,CADrC,GAEI,UAAXnC,CAAW,GACX4B,IAAcO,CADH,GAEXH,IAAaK,CAXnB;EAcA,MAAMS,IAA+B,EAArC;;EAEA,SAASC,IAAQ,CAAjB,EAAoBA,IAAQxC,EAAOyC,MAAnC,EAA2CD,GAA3C,EAAoD;IAC5C,UAAQxC,EAAOwC,CAAPxC,CAAR;IAAA,MAAewC;MAIf9B,QAAEA,CAJa8B;MAIb9B,OAAQJ,CAJKkC;MAIEtB,MAJFsB;MAIEpB,OAAKA,CAJPoB;MAIOpB,QAAOE,CAJdkB;MAIsBhB;IAJtBgB,IAKnBrE,EAAMuD,qBAANvD,EALI;IASN,IACiB,gBAAfoB,CAAe,IACf4B,KAAa,CADE,IAEfM,KAAc,CAFC,IAGfF,KAAgBd,CAHD,IAIfY,KAAejB,CAJA,IAKfe,KAAaD,CALE,IAMfK,KAAgBD,CAND,IAOfG,KAAcD,CAPC,IAQfH,KAAeD,CATjB,EAYS;IAGH,UAAazD,iBAAiBQ,CAAjBR,CAAb;IAAA,MACA+E,IAAaC,SAASC,EAAWC,eAApBF,EAA+C,EAA/CA,CADb;IAAA,MAEAG,IAAYH,SAASC,EAAWG,cAApBJ,EAA8C,EAA9CA,CAFZ;IAAA,MAGAK,IAAcL,SAASC,EAAWK,gBAApBN,EAAgD,EAAhDA,CAHd;IAAA,MAIAO,IAAeP,SAASC,EAAWO,iBAApBR,EAAiD,EAAjDA,CAJf;IAMN,IAAIS,IAAsB,CAA1B;IAAA,IACIC,IAAuB,CAD3B;IAKM,UACJ,iBAAiBlF,CAAjB,GACKA,EAAsBmF,WAAtBnF,GACAA,EAAsBV,WADtBU,GAEDuE,CAFCvE,GAGD6E,CAJJ,GAKI,CANA;IAAA,MAOAO,IACJ,kBAAkBpF,CAAlB,GACKA,EAAsBqF,YAAtBrF,GACAA,EAAsBZ,YADtBY,GAED2E,CAFC3E,GAGD+E,CAJJ,GAKI,CAbA;IAAA,MAeAO,IACJ,iBAAiBtF,CAAjB,GAC2C,MAAtCA,EAAsBmF,WAAgB,GACrC,CADqC,GAErChD,IAASnC,EAAsBmF,WAHrC,GAII,CApBA;IAAA,MAqBAI,IACJ,kBAAkBvF,CAAlB,GAC4C,MAAvCA,EAAsBqF,YAAiB,GACtC,CADsC,GAEtC9C,IAAUvC,EAAsBqF,YAHtC,GAII,CA1BA;IA4BN,IAAI1D,MAAqB3B,CAAzB,EAIkBiF,IADF,YAAV5D,CAAU,GACE6C,CADF,GAEO,UAAV7C,CAAU,GACL6C,IAAc5B,CADT,GAEA,cAAVjB,CAAU,GACLpB,EACZ0C,CADY1C,EAEZ0C,IAAUL,CAFErC,EAGZqC,CAHYrC,EAIZ0E,CAJY1E,EAKZ8E,CALY9E,EAMZ0C,IAAUuB,CANEjE,EAOZ0C,IAAUuB,CAAVvB,GAAwBE,CAPZ5C,EAQZ4C,CARY5C,CADK,GAaLiE,IAAc5B,IAAiB,CAhB/B2C,EAoBCC,IADF,YAAX5D,CAAW,GACE6C,CADF,GAEO,aAAX7C,CAAW,GACL6C,IAAelC,IAAgB,CAD1B,GAEA,UAAXX,CAAW,GACL6C,IAAelC,CADV,GAILhC,EACbyC,CADazC,EAEbyC,IAAUT,CAFGhC,EAGbgC,CAHahC,EAIbsE,CAJatE,EAKb4E,CALa5E,EAMbyC,IAAUyB,CANGlE,EAObyC,IAAUyB,CAAVzB,GAAyBI,CAPZ7C,EAQb6C,CARa7C,CA3BDgF,EAyChBA,IAAcO,KAAKC,GAALD,CAAS,CAATA,EAAYP,IAActC,CAA1B6C,CAzCEP,EA0ChBC,IAAeM,KAAKC,GAALD,CAAS,CAATA,EAAYN,IAAexC,CAA3B8C,CA1CCP,CAJlB,KA+CO;MAGHA,IADY,YAAV5D,CAAU,GACE6C,IAAcnB,CAAdmB,GAAoBS,CADtB,GAEO,UAAVtD,CAAU,GACL6C,IAAcf,CAAde,GAAuBa,CAAvBb,GAAsCkB,CADjC,GAEA,cAAV/D,CAAU,GACLpB,EACZ8C,CADY9C,EAEZkD,CAFYlD,EAGZsC,CAHYtC,EAIZ0E,CAJY1E,EAKZ8E,IAAeK,CALHnF,EAMZiE,CANYjE,EAOZiE,IAAcrB,CAPF5C,EAQZ4C,CARY5C,CADK,GAaLiE,KAAenB,IAAMR,IAAS,CAA9B2B,IAAmCkB,IAAkB,CAhBnEH,EAoBAC,IADa,YAAX5D,CAAW,GACE6C,IAAed,CAAfc,GAAsBI,CADxB,GAEO,aAAXjD,CAAW,GACL6C,KAAgBd,IAAOlB,IAAQ,CAA/BgC,IAAoCuB,IAAiB,CADhD,GAEA,UAAXpE,CAAW,GACL6C,IAAelB,CAAfkB,GAAuBU,CAAvBV,GAAqCuB,CADhC,GAILzF,EACboD,CADapD,EAEbgD,CAFahD,EAGbkC,CAHalC,EAIbsE,CAJatE,EAKb4E,IAAca,CALDzF,EAMbkE,CANalE,EAObkE,IAAerB,CAPF7C,EAQb6C,CARa7C,CA3BfgF;MAuCI;QAAAU,YAAEA,CAAF;QAAcC;MAAd,IAA4B5F,CAA5B;MAGJiF,IAAW,MAAXM,CAAW,GACP,CADO,GAEPC,KAAKC,GAALD,CACE,CADFA,EAEEA,KAAKK,GAALL,CACEI,IAAYX,IAAcM,CAD5BC,EAEExF,EAAMX,YAANW,GAAqBuC,IAASgD,CAA9BvF,GAAuCoF,CAFzCI,CAFFA,CAFJP,EAUAC,IAAW,MAAXI,CAAW,GACP,CADO,GAEPE,KAAKC,GAALD,CACE,CADFA,EAEEA,KAAKK,GAALL,CACEG,IAAaT,IAAeI,CAD9BE,EAEExF,EAAMT,WAANS,GAAoBmC,IAAQmD,CAA5BtF,GAAqC0F,CAFvCF,CAFFA,CAZJP,EAqBFf,KAAe0B,IAAYX,CArBzBA,EAsBFd,KAAgBwB,IAAaT,CAtB3BD;IAyBSb;IAAAA,OAAK;MAAEtF,IAAIkB,CAAN;MAAa+C,KAAKkC,CAAlB;MAA+B5B,MAAM6B;IAArC,CAALd;EAGR;;EAAA;AAAA,CAreT;;AAqeS,SACTpD,YADS","names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","style","overflowY","overflowX","ownerDocument","defaultView","frameElement","e","frame","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","getParentElement","element","parent","parentElement","getRootNode","host","compute","target","options","document","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","push","body","viewportWidth","visualViewport","width","_b","innerWidth","viewportHeight","height","_d","innerHeight","scrollX","scrollY","window","targetHeight","targetWidth","top","targetTop","right","targetRight","bottom","targetBottom","left","targetLeft","getBoundingClientRect","marginTop","marginRight","marginBottom","marginLeft","parseFloat","computedStyle","scrollMarginTop","scrollMarginRight","scrollMarginBottom","scrollMarginLeft","targetBlock","targetInline","computations","index","length","borderLeft","parseInt","frameStyle","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","offsetWidth","scrollbarHeight","offsetHeight","scaleX","scaleY","Math","max","scrollbarWidth","scrollLeft","scrollTop","min"],"sources":["/Users/joji/Documents/CODE/React/react-cutioluis/node_modules/compute-scroll-into-view/src/index.ts"],"sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nconst isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nconst canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nconst getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nconst isHiddenByFrame = (el: Element): boolean => {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nconst isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nconst alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nconst getParentElement = (element: Node): Element | null => {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\nconst getScrollMargins = (target: Element) => {\n  const computedStyle = window.getComputedStyle(target)\n  return {\n    top: parseFloat(computedStyle.scrollMarginTop) || 0,\n    right: parseFloat(computedStyle.scrollMarginRight) || 0,\n    bottom: parseFloat(computedStyle.scrollMarginBottom) || 0,\n    left: parseFloat(computedStyle.scrollMarginLeft) || 0,\n  }\n}\n\n/** @public */\nexport const compute = (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = window.visualViewport?.width ?? innerWidth\n  const viewportHeight = window.visualViewport?.height ?? innerHeight\n  const { scrollX, scrollY } = window\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n  const {\n    top: marginTop,\n    right: marginRight,\n    bottom: marginBottom,\n    left: marginLeft,\n  } = getScrollMargins(target)\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop - marginTop\n      : block === 'end'\n      ? targetBottom + marginBottom\n      : targetTop + targetHeight / 2 - marginTop + marginBottom // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2 - marginLeft + marginRight\n      : inline === 'end'\n      ? targetRight + marginRight\n      : targetLeft - marginLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          scrollY,\n          scrollY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          scrollY + targetBlock,\n          scrollY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          scrollX,\n          scrollX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          scrollX + targetInline,\n          scrollX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + scrollY)\n      inlineScroll = Math.max(0, inlineScroll + scrollX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll =\n        scaleY === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollTop + blockScroll / scaleY,\n                frame.scrollHeight - height / scaleY + scrollbarHeight\n              )\n            )\n      inlineScroll =\n        scaleX === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollLeft + inlineScroll / scaleX,\n                frame.scrollWidth - width / scaleX + scrollbarWidth\n              )\n            )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"]},"metadata":{},"sourceType":"module"}