{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport warning from \"rc-util/es/warning\";\nimport getEntity from \"./keyUtil\";\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n      title = _ref.title,\n      _title = _ref._title,\n      key = _ref.key,\n      children = _ref.children;\n\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = _objectWithoutProperties(_treeNode$props, _excluded);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n      fieldTitles = _fillFieldNames._title,\n      fieldKey = _fillFieldNames.key,\n      fieldChildren = _fillFieldNames.children;\n\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos); // Pick matched title in field title list\n\n      var mergedTitle;\n\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      } // Add FlattenDataNode into list\n\n\n      var flattenNode = _objectSpread(_objectSpread({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\nexport function traverseDataNodes(dataNodes, callback, // To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n\n  mergedConfig = mergedConfig || {}; // Init config\n\n  var _mergedConfig = mergedConfig,\n      childrenPropName = _mergedConfig.childrenPropName,\n      externalGetKey = _mergedConfig.externalGetKey,\n      fieldNames = _mergedConfig.fieldNames;\n\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n      fieldKey = _fillFieldNames2.key,\n      fieldChildren = _fillFieldNames2.children;\n\n  var mergeChildrenPropName = childrenPropName || fieldChildren; // Get keys\n\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  } // Process\n\n\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : []; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var _data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(_data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref2.initWrapper,\n      processEntity = _ref2.processEntity,\n      onProcessFinished = _ref2.onProcessFinished,\n      externalGetKey = _ref2.externalGetKey,\n      childrenPropName = _ref2.childrenPropName,\n      fieldNames = _ref2.fieldNames;\n\n  var\n  /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined; // Init config\n\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level,\n        nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n      selectedKeys = _ref3.selectedKeys,\n      loadedKeys = _ref3.loadedKeys,\n      loadingKeys = _ref3.loadingKeys,\n      checkedKeys = _ref3.checkedKeys,\n      halfCheckedKeys = _ref3.halfCheckedKeys,\n      dragOverNodeKey = _ref3.dragOverNodeKey,\n      dropPosition = _ref3.dropPosition,\n      keyEntities = _ref3.keyEntities;\n  var entity = getEntity(keyEntities, key);\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active,\n      eventKey = props.eventKey;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"names":["_typeof","_toConsumableArray","_objectSpread","_objectWithoutProperties","_excluded","toArray","omit","warning","getEntity","getPosition","level","index","concat","isTreeNode","node","type","getKey","key","pos","undefined","fillFieldNames","fieldNames","_ref","title","_title","children","mergedTitle","warningWithoutKey","treeData","keys","Map","dig","list","path","arguments","length","forEach","treeNode","recordKey","String","has","set","convertTreeToData","rootNodes","treeNodes","map","_treeNode$props","props","rest","dataNode","parsedChildren","filter","flattenTreeData","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","mergedKey","i","fieldTitle","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","_data","parentPos","nodes","subNode","subIndex","convertDataToEntities","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref3","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","Object","defineProperty","get"],"sources":["/Users/joji/Downloads/react-cutioluis-main copy/node_modules/rc-tree/es/utils/treeUtil.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport warning from \"rc-util/es/warning\";\nimport getEntity from \"./keyUtil\";\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n        children = _treeNode$props.children,\n        rest = _objectWithoutProperties(_treeNode$props, _excluded);\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n\n      // Add FlattenDataNode into list\n      var flattenNode = _objectSpread(_objectSpread({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\n\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var _data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(_data);\n    }\n\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n    selectedKeys = _ref3.selectedKeys,\n    loadedKeys = _ref3.loadedKeys,\n    loadingKeys = _ref3.loadingKeys,\n    checkedKeys = _ref3.checkedKeys,\n    halfCheckedKeys = _ref3.halfCheckedKeys,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = getEntity(keyEntities, key);\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}