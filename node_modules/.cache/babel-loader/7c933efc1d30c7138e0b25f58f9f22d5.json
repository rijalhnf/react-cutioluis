{"ast":null,"code":"/* eslint-disable max-classes-per-file */\nimport BigIntDecimal from \"./BigIntDecimal\";\nimport NumberDecimal from \"./NumberDecimal\";\nimport { trimNumber } from \"./numberUtil\";\nimport { supportBigInt } from \"./supportUtil\"; // Still support origin export\n\nexport { NumberDecimal, BigIntDecimal };\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  var cutOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (numStr === '') {\n    return '';\n  }\n\n  var _trimNumber = trimNumber(numStr),\n      negativeStr = _trimNumber.negativeStr,\n      integerStr = _trimNumber.integerStr,\n      decimalStr = _trimNumber.decimalStr;\n\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5 && !cutOnly) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision, cutOnly);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}","map":{"version":3,"names":["BigIntDecimal","NumberDecimal","trimNumber","supportBigInt","getMiniDecimal","value","toFixed","numStr","separatorStr","precision","cutOnly","arguments","length","undefined","_trimNumber","negativeStr","integerStr","decimalStr","precisionDecimalStr","concat","numberWithoutDecimal","advancedNum","Number","advancedDecimal","add","repeat","toString","padEnd","slice"],"sources":["/Users/joji/Downloads/react-cutioluis-main copy/node_modules/@rc-component/mini-decimal/es/MiniDecimal.js"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n\nimport BigIntDecimal from \"./BigIntDecimal\";\nimport NumberDecimal from \"./NumberDecimal\";\nimport { trimNumber } from \"./numberUtil\";\nimport { supportBigInt } from \"./supportUtil\";\n\n// Still support origin export\nexport { NumberDecimal, BigIntDecimal };\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n  return new NumberDecimal(value);\n}\n\n/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */\nexport function toFixed(numStr, separatorStr, precision) {\n  var cutOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (numStr === '') {\n    return '';\n  }\n  var _trimNumber = trimNumber(numStr),\n    negativeStr = _trimNumber.negativeStr,\n    integerStr = _trimNumber.integerStr,\n    decimalStr = _trimNumber.decimalStr;\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n    if (advancedNum >= 5 && !cutOnly) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision, cutOnly);\n    }\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}"],"mappings":"AAAA;AAEA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,eAA9B,C,CAEA;;AACA,SAASF,aAAT,EAAwBD,aAAxB;AACA,eAAe,SAASI,cAAT,CAAwBC,KAAxB,EAA+B;EAC5C;EACA;EACA,IAAIF,aAAa,EAAjB,EAAqB;IACnB,OAAO,IAAIH,aAAJ,CAAkBK,KAAlB,CAAP;EACD;;EACD,OAAO,IAAIJ,aAAJ,CAAkBI,KAAlB,CAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,YAAzB,EAAuCC,SAAvC,EAAkD;EACvD,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAAlF;;EACA,IAAIJ,MAAM,KAAK,EAAf,EAAmB;IACjB,OAAO,EAAP;EACD;;EACD,IAAIO,WAAW,GAAGZ,UAAU,CAACK,MAAD,CAA5B;EAAA,IACEQ,WAAW,GAAGD,WAAW,CAACC,WAD5B;EAAA,IAEEC,UAAU,GAAGF,WAAW,CAACE,UAF3B;EAAA,IAGEC,UAAU,GAAGH,WAAW,CAACG,UAH3B;;EAIA,IAAIC,mBAAmB,GAAG,GAAGC,MAAH,CAAUX,YAAV,EAAwBW,MAAxB,CAA+BF,UAA/B,CAA1B;EACA,IAAIG,oBAAoB,GAAG,GAAGD,MAAH,CAAUJ,WAAV,EAAuBI,MAAvB,CAA8BH,UAA9B,CAA3B;;EACA,IAAIP,SAAS,IAAI,CAAjB,EAAoB;IAClB;IACA,IAAIY,WAAW,GAAGC,MAAM,CAACL,UAAU,CAACR,SAAD,CAAX,CAAxB;;IACA,IAAIY,WAAW,IAAI,CAAf,IAAoB,CAACX,OAAzB,EAAkC;MAChC,IAAIa,eAAe,GAAGnB,cAAc,CAACG,MAAD,CAAd,CAAuBiB,GAAvB,CAA2B,GAAGL,MAAH,CAAUJ,WAAV,EAAuB,IAAvB,EAA6BI,MAA7B,CAAoC,IAAIM,MAAJ,CAAWhB,SAAX,CAApC,EAA2DU,MAA3D,CAAkE,KAAKE,WAAvE,CAA3B,CAAtB;MACA,OAAOf,OAAO,CAACiB,eAAe,CAACG,QAAhB,EAAD,EAA6BlB,YAA7B,EAA2CC,SAA3C,EAAsDC,OAAtD,CAAd;IACD;;IACD,IAAID,SAAS,KAAK,CAAlB,EAAqB;MACnB,OAAOW,oBAAP;IACD;;IACD,OAAO,GAAGD,MAAH,CAAUC,oBAAV,EAAgCD,MAAhC,CAAuCX,YAAvC,EAAqDW,MAArD,CAA4DF,UAAU,CAACU,MAAX,CAAkBlB,SAAlB,EAA6B,GAA7B,EAAkCmB,KAAlC,CAAwC,CAAxC,EAA2CnB,SAA3C,CAA5D,CAAP;EACD;;EACD,IAAIS,mBAAmB,KAAK,IAA5B,EAAkC;IAChC,OAAOE,oBAAP;EACD;;EACD,OAAO,GAAGD,MAAH,CAAUC,oBAAV,EAAgCD,MAAhC,CAAuCD,mBAAvC,CAAP;AACD"},"metadata":{},"sourceType":"module"}