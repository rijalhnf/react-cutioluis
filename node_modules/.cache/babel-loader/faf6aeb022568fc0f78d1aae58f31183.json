{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nconst MeasureText = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    style,\n    children\n  } = _ref;\n  const spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    isExceed: () => {\n      const span = spanRef.current;\n      return span.scrollHeight > span.clientHeight;\n    },\n    getHeight: () => spanRef.current.clientHeight\n  }));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      // zIndex: -9999,\n      // visibility: 'hidden',\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\n\nfunction cuttable(node) {\n  const type = typeof node;\n  return type === 'string' || type === 'number';\n}\n\nfunction getNodesLen(nodeList) {\n  let totalLen = 0;\n  nodeList.forEach(node => {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\n\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n\n    const node = nodeList[i];\n    const canCut = cuttable(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen; // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n\n  return nodeList;\n} // Measure for the `text` is exceed the `rows` or not\n\n\nconst STATUS_MEASURE_NONE = 0;\nconst STATUS_MEASURE_START = 1;\nconst STATUS_MEASURE_NEED_ELLIPSIS = 2;\nconst STATUS_MEASURE_NO_NEED_ELLIPSIS = 3;\nconst lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nexport default function EllipsisMeasure(props) {\n  const {\n    enabledMeasure,\n    width,\n    text,\n    children,\n    rows,\n    miscDeps,\n    onEllipsis\n  } = props;\n  const nodeList = React.useMemo(() => toArray(text), [text]);\n  const nodeLen = React.useMemo(() => getNodesLen(nodeList), [text]); // ========================= Full Content =========================\n\n  const fullContent = React.useMemo(() => children(nodeList, false, false), [text]); // ========================= Cut Content ==========================\n\n  const [ellipsisCutIndex, setEllipsisCutIndex] = React.useState(null);\n  const cutMidRef = React.useRef(null); // ========================= NeedEllipsis =========================\n\n  const needEllipsisRef = React.useRef(null);\n  const [needEllipsis, setNeedEllipsis] = React.useState(STATUS_MEASURE_NONE);\n  const [ellipsisHeight, setEllipsisHeight] = React.useState(0); // Trigger start measure\n\n  useLayoutEffect(() => {\n    if (enabledMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_START);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enabledMeasure, nodeList]); // Measure process\n\n  useLayoutEffect(() => {\n    var _a, _b;\n\n    if (needEllipsis === STATUS_MEASURE_START) {\n      const isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null); // For the accuracy issue, we add 1px to the height\n\n      setEllipsisHeight((((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0) + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]); // ========================= Cut Measure ==========================\n\n  const cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  useLayoutEffect(() => {\n    var _a;\n\n    const [minIndex, maxIndex] = ellipsisCutIndex || [0, 0];\n\n    if (minIndex !== maxIndex) {\n      const midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      const isOverflow = midHeight > ellipsisHeight;\n      let targetMidIndex = cutMidIndex;\n\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n\n      if (isOverflow) {\n        setEllipsisCutIndex([minIndex, targetMidIndex]);\n      } else {\n        setEllipsisCutIndex([targetMidIndex, maxIndex]);\n      }\n    }\n  }, [ellipsisCutIndex, cutMidIndex]); // ========================= Text Content =========================\n\n  const finalContent = React.useMemo(() => {\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      const content = children(nodeList, false, false); // Limit the max line count to avoid scrollbar blink\n      // https://github.com/ant-design/ant-design/issues/42958\n\n      if (needEllipsis !== STATUS_MEASURE_NO_NEED_ELLIPSIS && needEllipsis !== STATUS_MEASURE_NONE) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          style: Object.assign(Object.assign({}, lineClipStyle), {\n            WebkitLineClamp: rows\n          })\n        }, content);\n      }\n\n      return content;\n    }\n\n    return children(sliceNodes(nodeList, ellipsisCutIndex[0]), true, true);\n  }, [needEllipsis, ellipsisCutIndex, nodeList].concat(_toConsumableArray(miscDeps))); // ============================ Render ============================\n\n  const measureStyle = {\n    width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true, true)));\n}","map":{"version":3,"names":["_toConsumableArray","React","toArray","useLayoutEffect","MeasureText","forwardRef","_ref","ref","style","children","spanRef","useRef","useImperativeHandle","isExceed","span","current","scrollHeight","clientHeight","getHeight","createElement","Object","assign","position","display","left","top","pointerEvents","backgroundColor","cuttable","node","type","getNodesLen","nodeList","totalLen","forEach","String","length","sliceNodes","len","currLen","currentNodeList","i","canCut","nodeLen","nextLen","restLen","push","slice","STATUS_MEASURE_NONE","STATUS_MEASURE_START","STATUS_MEASURE_NEED_ELLIPSIS","STATUS_MEASURE_NO_NEED_ELLIPSIS","lineClipStyle","overflow","WebkitBoxOrient","EllipsisMeasure","props","enabledMeasure","width","text","rows","miscDeps","onEllipsis","useMemo","fullContent","ellipsisCutIndex","setEllipsisCutIndex","useState","cutMidRef","needEllipsisRef","needEllipsis","setNeedEllipsis","ellipsisHeight","setEllipsisHeight","_a","_b","isOverflow","cutMidIndex","Math","ceil","minIndex","maxIndex","midHeight","targetMidIndex","finalContent","content","WebkitLineClamp","concat","measureStyle","whiteSpace","margin","padding","Fragment"],"sources":["/Users/joji/Downloads/react-cutioluis-main copy/node_modules/antd/es/typography/Base/Ellipsis.js"],"sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nconst MeasureText = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    style,\n    children\n  } = _ref;\n  const spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    isExceed: () => {\n      const span = spanRef.current;\n      return span.scrollHeight > span.clientHeight;\n    },\n    getHeight: () => spanRef.current.clientHeight\n  }));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      // zIndex: -9999,\n      // visibility: 'hidden',\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\nfunction cuttable(node) {\n  const type = typeof node;\n  return type === 'string' || type === 'number';\n}\nfunction getNodesLen(nodeList) {\n  let totalLen = 0;\n  nodeList.forEach(node => {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    const node = nodeList[i];\n    const canCut = cuttable(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\n// Measure for the `text` is exceed the `rows` or not\nconst STATUS_MEASURE_NONE = 0;\nconst STATUS_MEASURE_START = 1;\nconst STATUS_MEASURE_NEED_ELLIPSIS = 2;\nconst STATUS_MEASURE_NO_NEED_ELLIPSIS = 3;\nconst lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nexport default function EllipsisMeasure(props) {\n  const {\n    enabledMeasure,\n    width,\n    text,\n    children,\n    rows,\n    miscDeps,\n    onEllipsis\n  } = props;\n  const nodeList = React.useMemo(() => toArray(text), [text]);\n  const nodeLen = React.useMemo(() => getNodesLen(nodeList), [text]);\n  // ========================= Full Content =========================\n  const fullContent = React.useMemo(() => children(nodeList, false, false), [text]);\n  // ========================= Cut Content ==========================\n  const [ellipsisCutIndex, setEllipsisCutIndex] = React.useState(null);\n  const cutMidRef = React.useRef(null);\n  // ========================= NeedEllipsis =========================\n  const needEllipsisRef = React.useRef(null);\n  const [needEllipsis, setNeedEllipsis] = React.useState(STATUS_MEASURE_NONE);\n  const [ellipsisHeight, setEllipsisHeight] = React.useState(0);\n  // Trigger start measure\n  useLayoutEffect(() => {\n    if (enabledMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_START);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enabledMeasure, nodeList]);\n  // Measure process\n  useLayoutEffect(() => {\n    var _a, _b;\n    if (needEllipsis === STATUS_MEASURE_START) {\n      const isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null);\n      // For the accuracy issue, we add 1px to the height\n      setEllipsisHeight((((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0) + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]);\n  // ========================= Cut Measure ==========================\n  const cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  useLayoutEffect(() => {\n    var _a;\n    const [minIndex, maxIndex] = ellipsisCutIndex || [0, 0];\n    if (minIndex !== maxIndex) {\n      const midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      const isOverflow = midHeight > ellipsisHeight;\n      let targetMidIndex = cutMidIndex;\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n      if (isOverflow) {\n        setEllipsisCutIndex([minIndex, targetMidIndex]);\n      } else {\n        setEllipsisCutIndex([targetMidIndex, maxIndex]);\n      }\n    }\n  }, [ellipsisCutIndex, cutMidIndex]);\n  // ========================= Text Content =========================\n  const finalContent = React.useMemo(() => {\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      const content = children(nodeList, false, false);\n      // Limit the max line count to avoid scrollbar blink\n      // https://github.com/ant-design/ant-design/issues/42958\n      if (needEllipsis !== STATUS_MEASURE_NO_NEED_ELLIPSIS && needEllipsis !== STATUS_MEASURE_NONE) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          style: Object.assign(Object.assign({}, lineClipStyle), {\n            WebkitLineClamp: rows\n          })\n        }, content);\n      }\n      return content;\n    }\n    return children(sliceNodes(nodeList, ellipsisCutIndex[0]), true, true);\n  }, [needEllipsis, ellipsisCutIndex, nodeList].concat(_toConsumableArray(miscDeps)));\n  // ============================ Render ============================\n  const measureStyle = {\n    width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && ( /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent)), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && ( /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true, true))));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}