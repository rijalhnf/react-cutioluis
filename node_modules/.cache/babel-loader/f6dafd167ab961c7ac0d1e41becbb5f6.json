{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"treeExpandAction\", \"virtual\", \"listHeight\", \"listItemHeight\", \"listItemScrollOffset\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\", \"treeTitleRender\"];\nimport { BaseSelect } from 'rc-select';\nimport useId from \"rc-select/es/hooks/useId\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport useCache from \"./hooks/useCache\";\nimport useCheckedKeys from \"./hooks/useCheckedKeys\";\nimport useDataEntities from \"./hooks/useDataEntities\";\nimport useFilterTreeData from \"./hooks/useFilterTreeData\";\nimport useRefFunc from \"./hooks/useRefFunc\";\nimport useTreeData from \"./hooks/useTreeData\";\nimport LegacyContext from \"./LegacyContext\";\nimport OptionList from \"./OptionList\";\nimport TreeNode from \"./TreeNode\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport { fillAdditionalInfo, fillLegacyProps } from \"./utils/legacyUtil\";\nimport { formatStrategyValues, SHOW_ALL, SHOW_CHILD, SHOW_PARENT } from \"./utils/strategyUtil\";\nimport { fillFieldNames, isNil, toArray } from \"./utils/valueUtil\";\nimport warningProps from \"./utils/warningPropsUtil\";\n/** @deprecated This is only used for legacy compatible. Not works on new code. */\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\n\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n      _props$prefixCls = props.prefixCls,\n      prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n      value = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect,\n      searchValue = props.searchValue,\n      inputValue = props.inputValue,\n      onSearch = props.onSearch,\n      _props$autoClearSearc = props.autoClearSearchValue,\n      autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n      filterTreeNode = props.filterTreeNode,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      showCheckedStrategy = props.showCheckedStrategy,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue,\n      fieldNames = props.fieldNames,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      children = props.children,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      onTreeLoad = props.onTreeLoad,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      onTreeExpand = props.onTreeExpand,\n      treeExpandAction = props.treeExpandAction,\n      virtual = props.virtual,\n      _props$listHeight = props.listHeight,\n      listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n      _props$listItemHeight = props.listItemHeight,\n      listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n      _props$listItemScroll = props.listItemScrollOffset,\n      listItemScrollOffset = _props$listItemScroll === void 0 ? 0 : _props$listItemScroll,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n      dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n      treeLine = props.treeLine,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeMotion = props.treeMotion,\n      treeTitleRender = props.treeTitleRender,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple;\n\n  var _useMergedState = useMergedState(defaultValue, {\n    value: value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      internalValue = _useMergedState2[0],\n      setInternalValue = _useMergedState2[1]; // `multiple` && `!treeCheckable` should be show all\n\n\n  var mergedShowCheckedStrategy = React.useMemo(function () {\n    if (!treeCheckable) {\n      return SHOW_ALL;\n    }\n\n    return showCheckedStrategy || SHOW_CHILD;\n  }, [showCheckedStrategy, treeCheckable]); // ========================== Warning ===========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ========================= FieldNames =========================\n\n\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  },\n  /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  ); // =========================== Search ===========================\n\n  var _useMergedState3 = useMergedState('', {\n    value: searchValue !== undefined ? searchValue : inputValue,\n    postState: function postState(search) {\n      return search || '';\n    }\n  }),\n      _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n      mergedSearchValue = _useMergedState4[0],\n      setSearchValue = _useMergedState4[1];\n\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 || onSearch(searchText);\n  }; // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n\n\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n      keyEntities = _useDataEntities.keyEntities,\n      valueEntities = _useDataEntities.valueEntities;\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]); // Filtered Tree\n\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  }); // =========================== Label ============================\n\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      } // Loop from fieldNames\n\n\n      var titleList = mergedFieldNames._title;\n\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]); // ========================= Wrap Value =========================\n\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n          rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue); // Fill missing label & status\n\n      if (entity) {\n        var _rawLabel;\n\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      } else if (rawLabel === undefined) {\n        // We try to find in current `labelInValue` value\n        var labelInValueItem = toLabeledValues(internalValue).find(function (labeledItem) {\n          return labeledItem.value === rawValue;\n        });\n        rawLabel = labelInValueItem.label;\n      }\n\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues, internalValue]); // =========================== Values ===========================\n\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]); // Split value into full check and half check\n\n  var _React$useMemo = React.useMemo(function () {\n    var fullCheckValues = [];\n    var halfCheckValues = [];\n    rawMixedLabeledValues.forEach(function (item) {\n      if (item.halfChecked) {\n        halfCheckValues.push(item);\n      } else {\n        fullCheckValues.push(item);\n      }\n    });\n    return [fullCheckValues, halfCheckValues];\n  }, [rawMixedLabeledValues]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      rawLabeledValues = _React$useMemo2[0],\n      rawHalfLabeledValues = _React$useMemo2[1]; // const [mergedValues] = useCache(rawLabeledValues);\n\n\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]); // Convert value to key. Will fill missed keys for conduct check.\n\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n      _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n      rawCheckedValues = _useCheckedKeys2[0],\n      rawHalfCheckedValues = _useCheckedKeys2[1]; // Convert rawCheckedKeys to check strategy related values\n\n\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, mergedShowCheckedStrategy, keyEntities, mergedFieldNames); // Convert to value and filled with label\n\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key;\n\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 || (_keyEntities$key = _keyEntities$key.node) === null || _keyEntities$key === void 0 ? void 0 : _keyEntities$key[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    }); // Back fill with origin label\n\n    var labeledValues = values.map(function (val) {\n      var targetItem = rawLabeledValues.find(function (item) {\n        return item.value === val;\n      });\n      var label; // Ensure that when labelInValue is true, if label is undefined, it remains undefined.\n\n      if (labelInValue && targetItem.label !== undefined) {\n        label = targetItem.label;\n      } else if (!labelInValue && treeTitleRender) {\n        label = treeTitleRender(targetItem);\n      }\n\n      return {\n        value: val,\n        label: label\n      };\n    });\n    var rawDisplayValues = convert2LabelValues(labeledValues);\n    var firstVal = rawDisplayValues[0];\n\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, rawLabeledValues, convert2LabelValues, mergedShowCheckedStrategy, keyEntities]);\n\n  var _useCache = useCache(displayValues),\n      _useCache2 = _slicedToArray(_useCache, 1),\n      cachedDisplayValues = _useCache2[0]; // =========================== Change ===========================\n\n\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues); // Clean up if needed\n\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    } // Generate rest parameters is costly, so only do it when necessary\n\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, mergedShowCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnRawValues = eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  }); // ========================== Options ===========================\n\n  /** Trigger by option list */\n\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n\n    var selected = _ref2.selected,\n        source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey; // Never be falsy but keep it safe\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      }); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues.missingRawValues,\n            existRawValues = _splitRawValues.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        }); // Conduction by selected or not\n\n        var checkedKeys;\n\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n\n          checkedKeys = _conductCheck2.checkedKeys;\n        } // Fill back of keys\n\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    } // Trigger select event\n\n\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 || onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 || onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]); // ========================== Dropdown ==========================\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ====================== Display Change ========================\n\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    } // TreeSelect only have multiple mode which means display change only has remove\n\n\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  }); // ========================== Context ===========================\n\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      listItemScrollOffset: listItemScrollOffset,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      treeExpandAction: treeExpandAction,\n      treeTitleRender: treeTitleRender\n    };\n  }, [virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, listItemScrollOffset, filteredTreeData, mergedFieldNames, onOptionSelect, treeExpandAction, treeTitleRender]); // ======================= Legacy Context =======================\n\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]); // =========================== Render ===========================\n\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n}); // Assign name for Debug\n\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\n\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;","map":{"version":3,"names":["_extends","_toConsumableArray","_objectSpread","_slicedToArray","_objectWithoutProperties","_typeof","_excluded","BaseSelect","useId","conductCheck","useMergedState","warning","React","useCache","useCheckedKeys","useDataEntities","useFilterTreeData","useRefFunc","useTreeData","LegacyContext","OptionList","TreeNode","TreeSelectContext","fillAdditionalInfo","fillLegacyProps","formatStrategyValues","SHOW_ALL","SHOW_CHILD","SHOW_PARENT","fillFieldNames","isNil","toArray","warningProps","isRawValue","value","TreeSelect","forwardRef","props","ref","id","_props$prefixCls","prefixCls","defaultValue","onChange","onSelect","onDeselect","searchValue","inputValue","onSearch","_props$autoClearSearc","autoClearSearchValue","filterTreeNode","_props$treeNodeFilter","treeNodeFilterProp","showCheckedStrategy","treeNodeLabelProp","multiple","treeCheckable","treeCheckStrictly","labelInValue","fieldNames","treeDataSimpleMode","treeData","children","loadData","treeLoadedKeys","onTreeLoad","treeDefaultExpandAll","treeExpandedKeys","treeDefaultExpandedKeys","onTreeExpand","treeExpandAction","virtual","_props$listHeight","listHeight","_props$listItemHeight","listItemHeight","_props$listItemScroll","listItemScrollOffset","onDropdownVisibleChange","_props$dropdownMatchS","dropdownMatchSelectWidth","treeLine","treeIcon","showTreeIcon","switcherIcon","treeMotion","treeTitleRender","restProps","mergedId","treeConduction","mergedCheckable","mergedLabelInValue","mergedMultiple","_useMergedState","_useMergedState2","internalValue","setInternalValue","mergedShowCheckedStrategy","useMemo","process","env","NODE_ENV","mergedFieldNames","JSON","stringify","_useMergedState3","undefined","postState","search","_useMergedState4","mergedSearchValue","setSearchValue","onInternalSearch","searchText","mergedTreeData","_useDataEntities","keyEntities","valueEntities","splitRawValues","useCallback","newRawValues","missingRawValues","existRawValues","forEach","val","has","push","filteredTreeData","getLabel","item","titleList","_title","i","length","title","toLabeledValues","draftValues","values","map","convert2LabelValues","rawLabel","label","rawValue","rawHalfChecked","halfChecked","rawDisabled","entity","get","_rawLabel","node","disabled","labelInValueItem","find","labeledItem","rawMixedLabeledValues","_React$useMemo","fullCheckValues","halfCheckValues","_React$useMemo2","rawLabeledValues","rawHalfLabeledValues","rawValues","_useCheckedKeys","_useCheckedKeys2","rawCheckedValues","rawHalfCheckedValues","displayValues","displayKeys","key","_keyEntities$key$node","_keyEntities$key","labeledValues","targetItem","rawDisplayValues","firstVal","_item$label","_useCache","_useCache2","cachedDisplayValues","triggerChange","extra","source","eventValues","formattedKeyList","_ref","triggerValue","selected","returnRawValues","halfValues","filter","includes","concat","returnLabeledValues","additionalInfo","preValue","showPosition","checked","returnValues","onOptionSelect","selectedKey","_ref2","_node$mergedFieldName","selectedValue","v","_splitRawValues","keyList","checkedKeys","_conductCheck","_conductCheck2","halfCheckedKeys","onInternalDropdownVisibleChange","open","legacyParam","Object","defineProperty","onDisplayValuesChange","newValues","info","type","treeSelectContext","legacyContext","checkable","createElement","Provider","mode","emptyOptions","displayName","GenericTreeSelect"],"sources":["/Users/joji/Documents/CODE/React/react-cutioluis/node_modules/rc-tree-select/es/TreeSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"treeExpandAction\", \"virtual\", \"listHeight\", \"listItemHeight\", \"listItemScrollOffset\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\", \"treeTitleRender\"];\nimport { BaseSelect } from 'rc-select';\nimport useId from \"rc-select/es/hooks/useId\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport useCache from \"./hooks/useCache\";\nimport useCheckedKeys from \"./hooks/useCheckedKeys\";\nimport useDataEntities from \"./hooks/useDataEntities\";\nimport useFilterTreeData from \"./hooks/useFilterTreeData\";\nimport useRefFunc from \"./hooks/useRefFunc\";\nimport useTreeData from \"./hooks/useTreeData\";\nimport LegacyContext from \"./LegacyContext\";\nimport OptionList from \"./OptionList\";\nimport TreeNode from \"./TreeNode\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport { fillAdditionalInfo, fillLegacyProps } from \"./utils/legacyUtil\";\nimport { formatStrategyValues, SHOW_ALL, SHOW_CHILD, SHOW_PARENT } from \"./utils/strategyUtil\";\nimport { fillFieldNames, isNil, toArray } from \"./utils/valueUtil\";\nimport warningProps from \"./utils/warningPropsUtil\";\n\n/** @deprecated This is only used for legacy compatible. Not works on new code. */\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n    _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n    value = props.value,\n    defaultValue = props.defaultValue,\n    onChange = props.onChange,\n    onSelect = props.onSelect,\n    onDeselect = props.onDeselect,\n    searchValue = props.searchValue,\n    inputValue = props.inputValue,\n    onSearch = props.onSearch,\n    _props$autoClearSearc = props.autoClearSearchValue,\n    autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n    filterTreeNode = props.filterTreeNode,\n    _props$treeNodeFilter = props.treeNodeFilterProp,\n    treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n    showCheckedStrategy = props.showCheckedStrategy,\n    treeNodeLabelProp = props.treeNodeLabelProp,\n    multiple = props.multiple,\n    treeCheckable = props.treeCheckable,\n    treeCheckStrictly = props.treeCheckStrictly,\n    labelInValue = props.labelInValue,\n    fieldNames = props.fieldNames,\n    treeDataSimpleMode = props.treeDataSimpleMode,\n    treeData = props.treeData,\n    children = props.children,\n    loadData = props.loadData,\n    treeLoadedKeys = props.treeLoadedKeys,\n    onTreeLoad = props.onTreeLoad,\n    treeDefaultExpandAll = props.treeDefaultExpandAll,\n    treeExpandedKeys = props.treeExpandedKeys,\n    treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n    onTreeExpand = props.onTreeExpand,\n    treeExpandAction = props.treeExpandAction,\n    virtual = props.virtual,\n    _props$listHeight = props.listHeight,\n    listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n    _props$listItemHeight = props.listItemHeight,\n    listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n    _props$listItemScroll = props.listItemScrollOffset,\n    listItemScrollOffset = _props$listItemScroll === void 0 ? 0 : _props$listItemScroll,\n    onDropdownVisibleChange = props.onDropdownVisibleChange,\n    _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n    dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n    treeLine = props.treeLine,\n    treeIcon = props.treeIcon,\n    showTreeIcon = props.showTreeIcon,\n    switcherIcon = props.switcherIcon,\n    treeMotion = props.treeMotion,\n    treeTitleRender = props.treeTitleRender,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple;\n  var _useMergedState = useMergedState(defaultValue, {\n      value: value\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    internalValue = _useMergedState2[0],\n    setInternalValue = _useMergedState2[1];\n\n  // `multiple` && `!treeCheckable` should be show all\n  var mergedShowCheckedStrategy = React.useMemo(function () {\n    if (!treeCheckable) {\n      return SHOW_ALL;\n    }\n    return showCheckedStrategy || SHOW_CHILD;\n  }, [showCheckedStrategy, treeCheckable]);\n\n  // ========================== Warning ===========================\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  }\n\n  // ========================= FieldNames =========================\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  }, /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */);\n\n  // =========================== Search ===========================\n  var _useMergedState3 = useMergedState('', {\n      value: searchValue !== undefined ? searchValue : inputValue,\n      postState: function postState(search) {\n        return search || '';\n      }\n    }),\n    _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n    mergedSearchValue = _useMergedState4[0],\n    setSearchValue = _useMergedState4[1];\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 || onSearch(searchText);\n  };\n\n  // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n    keyEntities = _useDataEntities.keyEntities,\n    valueEntities = _useDataEntities.valueEntities;\n\n  /** Get `missingRawValues` which not exist in the tree yet */\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = [];\n\n    // Keep missing value in the cache\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]);\n\n  // Filtered Tree\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  });\n\n  // =========================== Label ============================\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      }\n\n      // Loop from fieldNames\n      var titleList = mergedFieldNames._title;\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]);\n\n  // ========================= Wrap Value =========================\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n        rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue);\n\n      // Fill missing label & status\n      if (entity) {\n        var _rawLabel;\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      } else if (rawLabel === undefined) {\n        // We try to find in current `labelInValue` value\n        var labelInValueItem = toLabeledValues(internalValue).find(function (labeledItem) {\n          return labeledItem.value === rawValue;\n        });\n        rawLabel = labelInValueItem.label;\n      }\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues, internalValue]);\n\n  // =========================== Values ===========================\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]);\n\n  // Split value into full check and half check\n  var _React$useMemo = React.useMemo(function () {\n      var fullCheckValues = [];\n      var halfCheckValues = [];\n      rawMixedLabeledValues.forEach(function (item) {\n        if (item.halfChecked) {\n          halfCheckValues.push(item);\n        } else {\n          fullCheckValues.push(item);\n        }\n      });\n      return [fullCheckValues, halfCheckValues];\n    }, [rawMixedLabeledValues]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    rawLabeledValues = _React$useMemo2[0],\n    rawHalfLabeledValues = _React$useMemo2[1];\n\n  // const [mergedValues] = useCache(rawLabeledValues);\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]);\n\n  // Convert value to key. Will fill missed keys for conduct check.\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n    _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n    rawCheckedValues = _useCheckedKeys2[0],\n    rawHalfCheckedValues = _useCheckedKeys2[1];\n\n  // Convert rawCheckedKeys to check strategy related values\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, mergedShowCheckedStrategy, keyEntities, mergedFieldNames);\n\n    // Convert to value and filled with label\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key;\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 || (_keyEntities$key = _keyEntities$key.node) === null || _keyEntities$key === void 0 ? void 0 : _keyEntities$key[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    });\n\n    // Back fill with origin label\n    var labeledValues = values.map(function (val) {\n      var targetItem = rawLabeledValues.find(function (item) {\n        return item.value === val;\n      });\n      var label;\n      // Ensure that when labelInValue is true, if label is undefined, it remains undefined.\n      if (labelInValue && targetItem.label !== undefined) {\n        label = targetItem.label;\n      } else if (!labelInValue && treeTitleRender) {\n        label = treeTitleRender(targetItem);\n      }\n      return {\n        value: val,\n        label: label\n      };\n    });\n    var rawDisplayValues = convert2LabelValues(labeledValues);\n    var firstVal = rawDisplayValues[0];\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, rawLabeledValues, convert2LabelValues, mergedShowCheckedStrategy, keyEntities]);\n  var _useCache = useCache(displayValues),\n    _useCache2 = _slicedToArray(_useCache, 1),\n    cachedDisplayValues = _useCache2[0];\n\n  // =========================== Change ===========================\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues);\n\n    // Clean up if needed\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    }\n\n    // Generate rest parameters is costly, so only do it when necessary\n    if (onChange) {\n      var eventValues = newRawValues;\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, mergedShowCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n      var _ref = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        },\n        triggerValue = _ref.triggerValue,\n        selected = _ref.selected;\n      var returnRawValues = eventValues;\n\n      // We need fill half check back\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      };\n\n      // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n      var showPosition = true;\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  });\n\n  // ========================== Options ===========================\n  /** Trigger by option list */\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n    var selected = _ref2.selected,\n      source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey;\n\n    // Never be falsy but keep it safe\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      });\n\n      // Add keys if tree conduction\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues.missingRawValues,\n          existRawValues = _splitRawValues.existRawValues;\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        });\n\n        // Conduction by selected or not\n        var checkedKeys;\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n          checkedKeys = _conductCheck2.checkedKeys;\n        }\n\n        // Fill back of keys\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    }\n\n    // Trigger select event\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 || onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 || onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]);\n\n  // ========================== Dropdown ==========================\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]);\n\n  // ====================== Display Change ========================\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    }\n\n    // TreeSelect only have multiple mode which means display change only has remove\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  });\n\n  // ========================== Context ===========================\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      listItemScrollOffset: listItemScrollOffset,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      treeExpandAction: treeExpandAction,\n      treeTitleRender: treeTitleRender\n    };\n  }, [virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, listItemScrollOffset, filteredTreeData, mergedFieldNames, onOptionSelect, treeExpandAction, treeTitleRender]);\n\n  // ======================= Legacy Context =======================\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]);\n\n  // =========================== Render ===========================\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined\n    // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange\n    // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch\n    // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n});\n\n// Assign name for Debug\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,kBAAP,MAA+B,8CAA/B;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,OAAOC,wBAAP,MAAqC,oDAArC;AACA,OAAOC,OAAP,MAAoB,mCAApB;AACA,IAAIC,SAAS,GAAG,CAAC,IAAD,EAAO,WAAP,EAAoB,OAApB,EAA6B,cAA7B,EAA6C,UAA7C,EAAyD,UAAzD,EAAqE,YAArE,EAAmF,aAAnF,EAAkG,YAAlG,EAAgH,UAAhH,EAA4H,sBAA5H,EAAoJ,gBAApJ,EAAsK,oBAAtK,EAA4L,qBAA5L,EAAmN,mBAAnN,EAAwO,UAAxO,EAAoP,eAApP,EAAqQ,mBAArQ,EAA0R,cAA1R,EAA0S,YAA1S,EAAwT,oBAAxT,EAA8U,UAA9U,EAA0V,UAA1V,EAAsW,UAAtW,EAAkX,gBAAlX,EAAoY,YAApY,EAAkZ,sBAAlZ,EAA0a,kBAA1a,EAA8b,yBAA9b,EAAyd,cAAzd,EAAye,kBAAze,EAA6f,SAA7f,EAAwgB,YAAxgB,EAAshB,gBAAthB,EAAwiB,sBAAxiB,EAAgkB,yBAAhkB,EAA2lB,0BAA3lB,EAAunB,UAAvnB,EAAmoB,UAAnoB,EAA+oB,cAA/oB,EAA+pB,cAA/pB,EAA+qB,YAA/qB,EAA6rB,iBAA7rB,CAAhB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,oBAApD;AACA,SAASC,oBAAT,EAA+BC,QAA/B,EAAyCC,UAAzC,EAAqDC,WAArD,QAAwE,sBAAxE;AACA,SAASC,cAAT,EAAyBC,KAAzB,EAAgCC,OAAhC,QAA+C,mBAA/C;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;EACzB,OAAO,CAACA,KAAD,IAAU7B,OAAO,CAAC6B,KAAD,CAAP,KAAmB,QAApC;AACD;;AACD,IAAIC,UAAU,GAAG,aAAavB,KAAK,CAACwB,UAAN,CAAiB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;EACnE,IAAIC,EAAE,GAAGF,KAAK,CAACE,EAAf;EAAA,IACEC,gBAAgB,GAAGH,KAAK,CAACI,SAD3B;EAAA,IAEEA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,gBAA9B,GAAiDA,gBAF/D;EAAA,IAGEN,KAAK,GAAGG,KAAK,CAACH,KAHhB;EAAA,IAIEQ,YAAY,GAAGL,KAAK,CAACK,YAJvB;EAAA,IAKEC,QAAQ,GAAGN,KAAK,CAACM,QALnB;EAAA,IAMEC,QAAQ,GAAGP,KAAK,CAACO,QANnB;EAAA,IAOEC,UAAU,GAAGR,KAAK,CAACQ,UAPrB;EAAA,IAQEC,WAAW,GAAGT,KAAK,CAACS,WARtB;EAAA,IASEC,UAAU,GAAGV,KAAK,CAACU,UATrB;EAAA,IAUEC,QAAQ,GAAGX,KAAK,CAACW,QAVnB;EAAA,IAWEC,qBAAqB,GAAGZ,KAAK,CAACa,oBAXhC;EAAA,IAYEA,oBAAoB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,IAAnC,GAA0CA,qBAZnE;EAAA,IAaEE,cAAc,GAAGd,KAAK,CAACc,cAbzB;EAAA,IAcEC,qBAAqB,GAAGf,KAAK,CAACgB,kBAdhC;EAAA,IAeEA,kBAAkB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,OAAnC,GAA6CA,qBAfpE;EAAA,IAgBEE,mBAAmB,GAAGjB,KAAK,CAACiB,mBAhB9B;EAAA,IAiBEC,iBAAiB,GAAGlB,KAAK,CAACkB,iBAjB5B;EAAA,IAkBEC,QAAQ,GAAGnB,KAAK,CAACmB,QAlBnB;EAAA,IAmBEC,aAAa,GAAGpB,KAAK,CAACoB,aAnBxB;EAAA,IAoBEC,iBAAiB,GAAGrB,KAAK,CAACqB,iBApB5B;EAAA,IAqBEC,YAAY,GAAGtB,KAAK,CAACsB,YArBvB;EAAA,IAsBEC,UAAU,GAAGvB,KAAK,CAACuB,UAtBrB;EAAA,IAuBEC,kBAAkB,GAAGxB,KAAK,CAACwB,kBAvB7B;EAAA,IAwBEC,QAAQ,GAAGzB,KAAK,CAACyB,QAxBnB;EAAA,IAyBEC,QAAQ,GAAG1B,KAAK,CAAC0B,QAzBnB;EAAA,IA0BEC,QAAQ,GAAG3B,KAAK,CAAC2B,QA1BnB;EAAA,IA2BEC,cAAc,GAAG5B,KAAK,CAAC4B,cA3BzB;EAAA,IA4BEC,UAAU,GAAG7B,KAAK,CAAC6B,UA5BrB;EAAA,IA6BEC,oBAAoB,GAAG9B,KAAK,CAAC8B,oBA7B/B;EAAA,IA8BEC,gBAAgB,GAAG/B,KAAK,CAAC+B,gBA9B3B;EAAA,IA+BEC,uBAAuB,GAAGhC,KAAK,CAACgC,uBA/BlC;EAAA,IAgCEC,YAAY,GAAGjC,KAAK,CAACiC,YAhCvB;EAAA,IAiCEC,gBAAgB,GAAGlC,KAAK,CAACkC,gBAjC3B;EAAA,IAkCEC,OAAO,GAAGnC,KAAK,CAACmC,OAlClB;EAAA,IAmCEC,iBAAiB,GAAGpC,KAAK,CAACqC,UAnC5B;EAAA,IAoCEA,UAAU,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,GAA/B,GAAqCA,iBApCpD;EAAA,IAqCEE,qBAAqB,GAAGtC,KAAK,CAACuC,cArChC;EAAA,IAsCEA,cAAc,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAtC3D;EAAA,IAuCEE,qBAAqB,GAAGxC,KAAK,CAACyC,oBAvChC;EAAA,IAwCEA,oBAAoB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,CAAnC,GAAuCA,qBAxChE;EAAA,IAyCEE,uBAAuB,GAAG1C,KAAK,CAAC0C,uBAzClC;EAAA,IA0CEC,qBAAqB,GAAG3C,KAAK,CAAC4C,wBA1ChC;EAAA,IA2CEA,wBAAwB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,IAAnC,GAA0CA,qBA3CvE;EAAA,IA4CEE,QAAQ,GAAG7C,KAAK,CAAC6C,QA5CnB;EAAA,IA6CEC,QAAQ,GAAG9C,KAAK,CAAC8C,QA7CnB;EAAA,IA8CEC,YAAY,GAAG/C,KAAK,CAAC+C,YA9CvB;EAAA,IA+CEC,YAAY,GAAGhD,KAAK,CAACgD,YA/CvB;EAAA,IAgDEC,UAAU,GAAGjD,KAAK,CAACiD,UAhDrB;EAAA,IAiDEC,eAAe,GAAGlD,KAAK,CAACkD,eAjD1B;EAAA,IAkDEC,SAAS,GAAGpF,wBAAwB,CAACiC,KAAD,EAAQ/B,SAAR,CAlDtC;;EAmDA,IAAImF,QAAQ,GAAGjF,KAAK,CAAC+B,EAAD,CAApB;EACA,IAAImD,cAAc,GAAGjC,aAAa,IAAI,CAACC,iBAAvC;EACA,IAAIiC,eAAe,GAAGlC,aAAa,IAAIC,iBAAvC;EACA,IAAIkC,kBAAkB,GAAGlC,iBAAiB,IAAIC,YAA9C;EACA,IAAIkC,cAAc,GAAGF,eAAe,IAAInC,QAAxC;;EACA,IAAIsC,eAAe,GAAGpF,cAAc,CAACgC,YAAD,EAAe;IAC/CR,KAAK,EAAEA;EADwC,CAAf,CAApC;EAAA,IAGE6D,gBAAgB,GAAG5F,cAAc,CAAC2F,eAAD,EAAkB,CAAlB,CAHnC;EAAA,IAIEE,aAAa,GAAGD,gBAAgB,CAAC,CAAD,CAJlC;EAAA,IAKEE,gBAAgB,GAAGF,gBAAgB,CAAC,CAAD,CALrC,CAzDmE,CAgEnE;;;EACA,IAAIG,yBAAyB,GAAGtF,KAAK,CAACuF,OAAN,CAAc,YAAY;IACxD,IAAI,CAAC1C,aAAL,EAAoB;MAClB,OAAO/B,QAAP;IACD;;IACD,OAAO4B,mBAAmB,IAAI3B,UAA9B;EACD,CAL+B,EAK7B,CAAC2B,mBAAD,EAAsBG,aAAtB,CAL6B,CAAhC,CAjEmE,CAwEnE;;EACA,IAAI2C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzCtE,YAAY,CAACK,KAAD,CAAZ;EACD,CA3EkE,CA6EnE;;;EACA,IAAIkE,gBAAgB,GAAG3F,KAAK,CAACuF,OAAN,CAAc,YAAY;IAC/C,OAAOtE,cAAc,CAAC+B,UAAD,CAArB;EACD,CAFsB;EAEpB;EACH,CAAC4C,IAAI,CAACC,SAAL,CAAe7C,UAAf,CAAD;EACA;EAJuB,CAAvB,CA9EmE,CAoFnE;;EACA,IAAI8C,gBAAgB,GAAGhG,cAAc,CAAC,EAAD,EAAK;IACtCwB,KAAK,EAAEY,WAAW,KAAK6D,SAAhB,GAA4B7D,WAA5B,GAA0CC,UADX;IAEtC6D,SAAS,EAAE,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;MACpC,OAAOA,MAAM,IAAI,EAAjB;IACD;EAJqC,CAAL,CAArC;EAAA,IAMEC,gBAAgB,GAAG3G,cAAc,CAACuG,gBAAD,EAAmB,CAAnB,CANnC;EAAA,IAOEK,iBAAiB,GAAGD,gBAAgB,CAAC,CAAD,CAPtC;EAAA,IAQEE,cAAc,GAAGF,gBAAgB,CAAC,CAAD,CARnC;;EASA,IAAIG,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,UAA1B,EAAsC;IAC3DF,cAAc,CAACE,UAAD,CAAd;IACAlE,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,IAA4CA,QAAQ,CAACkE,UAAD,CAApD;EACD,CAHD,CA9FmE,CAmGnE;EACA;EACA;EACA;;;EACA,IAAIC,cAAc,GAAGjG,WAAW,CAAC4C,QAAD,EAAWC,QAAX,EAAqBF,kBAArB,CAAhC;;EACA,IAAIuD,gBAAgB,GAAGrG,eAAe,CAACoG,cAAD,EAAiBZ,gBAAjB,CAAtC;EAAA,IACEc,WAAW,GAAGD,gBAAgB,CAACC,WADjC;EAAA,IAEEC,aAAa,GAAGF,gBAAgB,CAACE,aAFnC;EAIA;;;EACA,IAAIC,cAAc,GAAG3G,KAAK,CAAC4G,WAAN,CAAkB,UAAUC,YAAV,EAAwB;IAC7D,IAAIC,gBAAgB,GAAG,EAAvB;IACA,IAAIC,cAAc,GAAG,EAArB,CAF6D,CAI7D;;IACAF,YAAY,CAACG,OAAb,CAAqB,UAAUC,GAAV,EAAe;MAClC,IAAIP,aAAa,CAACQ,GAAd,CAAkBD,GAAlB,CAAJ,EAA4B;QAC1BF,cAAc,CAACI,IAAf,CAAoBF,GAApB;MACD,CAFD,MAEO;QACLH,gBAAgB,CAACK,IAAjB,CAAsBF,GAAtB;MACD;IACF,CAND;IAOA,OAAO;MACLH,gBAAgB,EAAEA,gBADb;MAELC,cAAc,EAAEA;IAFX,CAAP;EAID,CAhBoB,EAgBlB,CAACL,aAAD,CAhBkB,CAArB,CA7GmE,CA+HnE;;EACA,IAAIU,gBAAgB,GAAGhH,iBAAiB,CAACmG,cAAD,EAAiBJ,iBAAjB,EAAoC;IAC1EnD,UAAU,EAAE2C,gBAD8D;IAE1ElD,kBAAkB,EAAEA,kBAFsD;IAG1EF,cAAc,EAAEA;EAH0D,CAApC,CAAxC,CAhImE,CAsInE;;EACA,IAAI8E,QAAQ,GAAGrH,KAAK,CAAC4G,WAAN,CAAkB,UAAUU,IAAV,EAAgB;IAC/C,IAAIA,IAAJ,EAAU;MACR,IAAI3E,iBAAJ,EAAuB;QACrB,OAAO2E,IAAI,CAAC3E,iBAAD,CAAX;MACD,CAHO,CAKR;;;MACA,IAAI4E,SAAS,GAAG5B,gBAAgB,CAAC6B,MAAjC;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;QAC5C,IAAIE,KAAK,GAAGL,IAAI,CAACC,SAAS,CAACE,CAAD,CAAV,CAAhB;;QACA,IAAIE,KAAK,KAAK5B,SAAd,EAAyB;UACvB,OAAO4B,KAAP;QACD;MACF;IACF;EACF,CAfc,EAeZ,CAAChC,gBAAD,EAAmBhD,iBAAnB,CAfY,CAAf,CAvImE,CAwJnE;;EACA,IAAIiF,eAAe,GAAG5H,KAAK,CAAC4G,WAAN,CAAkB,UAAUiB,WAAV,EAAuB;IAC7D,IAAIC,MAAM,GAAG3G,OAAO,CAAC0G,WAAD,CAApB;IACA,OAAOC,MAAM,CAACC,GAAP,CAAW,UAAUd,GAAV,EAAe;MAC/B,IAAI5F,UAAU,CAAC4F,GAAD,CAAd,EAAqB;QACnB,OAAO;UACL3F,KAAK,EAAE2F;QADF,CAAP;MAGD;;MACD,OAAOA,GAAP;IACD,CAPM,CAAP;EAQD,CAVqB,EAUnB,EAVmB,CAAtB;EAWA,IAAIe,mBAAmB,GAAGhI,KAAK,CAAC4G,WAAN,CAAkB,UAAUiB,WAAV,EAAuB;IACjE,IAAIC,MAAM,GAAGF,eAAe,CAACC,WAAD,CAA5B;IACA,OAAOC,MAAM,CAACC,GAAP,CAAW,UAAUT,IAAV,EAAgB;MAChC,IAAIW,QAAQ,GAAGX,IAAI,CAACY,KAApB;MACA,IAAIC,QAAQ,GAAGb,IAAI,CAAChG,KAApB;MAAA,IACE8G,cAAc,GAAGd,IAAI,CAACe,WADxB;MAEA,IAAIC,WAAJ;MACA,IAAIC,MAAM,GAAG7B,aAAa,CAAC8B,GAAd,CAAkBL,QAAlB,CAAb,CALgC,CAOhC;;MACA,IAAII,MAAJ,EAAY;QACV,IAAIE,SAAJ;;QACAR,QAAQ,GAAG,CAACQ,SAAS,GAAGR,QAAb,MAA2B,IAA3B,IAAmCQ,SAAS,KAAK,KAAK,CAAtD,GAA0DA,SAA1D,GAAsEpB,QAAQ,CAACkB,MAAM,CAACG,IAAR,CAAzF;QACAJ,WAAW,GAAGC,MAAM,CAACG,IAAP,CAAYC,QAA1B;MACD,CAJD,MAIO,IAAIV,QAAQ,KAAKlC,SAAjB,EAA4B;QACjC;QACA,IAAI6C,gBAAgB,GAAGhB,eAAe,CAACxC,aAAD,CAAf,CAA+ByD,IAA/B,CAAoC,UAAUC,WAAV,EAAuB;UAChF,OAAOA,WAAW,CAACxH,KAAZ,KAAsB6G,QAA7B;QACD,CAFsB,CAAvB;QAGAF,QAAQ,GAAGW,gBAAgB,CAACV,KAA5B;MACD;;MACD,OAAO;QACLA,KAAK,EAAED,QADF;QAEL3G,KAAK,EAAE6G,QAFF;QAGLE,WAAW,EAAED,cAHR;QAILO,QAAQ,EAAEL;MAJL,CAAP;IAMD,CAzBM,CAAP;EA0BD,CA5ByB,EA4BvB,CAAC5B,aAAD,EAAgBW,QAAhB,EAA0BO,eAA1B,EAA2CxC,aAA3C,CA5BuB,CAA1B,CApKmE,CAkMnE;;EACA,IAAI2D,qBAAqB,GAAG/I,KAAK,CAACuF,OAAN,CAAc,YAAY;IACpD,OAAOqC,eAAe,CAACxC,aAAD,CAAtB;EACD,CAF2B,EAEzB,CAACwC,eAAD,EAAkBxC,aAAlB,CAFyB,CAA5B,CAnMmE,CAuMnE;;EACA,IAAI4D,cAAc,GAAGhJ,KAAK,CAACuF,OAAN,CAAc,YAAY;IAC3C,IAAI0D,eAAe,GAAG,EAAtB;IACA,IAAIC,eAAe,GAAG,EAAtB;IACAH,qBAAqB,CAAC/B,OAAtB,CAA8B,UAAUM,IAAV,EAAgB;MAC5C,IAAIA,IAAI,CAACe,WAAT,EAAsB;QACpBa,eAAe,CAAC/B,IAAhB,CAAqBG,IAArB;MACD,CAFD,MAEO;QACL2B,eAAe,CAAC9B,IAAhB,CAAqBG,IAArB;MACD;IACF,CAND;IAOA,OAAO,CAAC2B,eAAD,EAAkBC,eAAlB,CAAP;EACD,CAXkB,EAWhB,CAACH,qBAAD,CAXgB,CAArB;EAAA,IAYEI,eAAe,GAAG5J,cAAc,CAACyJ,cAAD,EAAiB,CAAjB,CAZlC;EAAA,IAaEI,gBAAgB,GAAGD,eAAe,CAAC,CAAD,CAbpC;EAAA,IAcEE,oBAAoB,GAAGF,eAAe,CAAC,CAAD,CAdxC,CAxMmE,CAwNnE;;;EACA,IAAIG,SAAS,GAAGtJ,KAAK,CAACuF,OAAN,CAAc,YAAY;IACxC,OAAO6D,gBAAgB,CAACrB,GAAjB,CAAqB,UAAUT,IAAV,EAAgB;MAC1C,OAAOA,IAAI,CAAChG,KAAZ;IACD,CAFM,CAAP;EAGD,CAJe,EAIb,CAAC8H,gBAAD,CAJa,CAAhB,CAzNmE,CA+NnE;;EACA,IAAIG,eAAe,GAAGrJ,cAAc,CAACkJ,gBAAD,EAAmBC,oBAAnB,EAAyCvE,cAAzC,EAAyD2B,WAAzD,CAApC;EAAA,IACE+C,gBAAgB,GAAGjK,cAAc,CAACgK,eAAD,EAAkB,CAAlB,CADnC;EAAA,IAEEE,gBAAgB,GAAGD,gBAAgB,CAAC,CAAD,CAFrC;EAAA,IAGEE,oBAAoB,GAAGF,gBAAgB,CAAC,CAAD,CAHzC,CAhOmE,CAqOnE;;;EACA,IAAIG,aAAa,GAAG3J,KAAK,CAACuF,OAAN,CAAc,YAAY;IAC5C;IACA,IAAIqE,WAAW,GAAG/I,oBAAoB,CAAC4I,gBAAD,EAAmBnE,yBAAnB,EAA8CmB,WAA9C,EAA2Dd,gBAA3D,CAAtC,CAF4C,CAI5C;;IACA,IAAImC,MAAM,GAAG8B,WAAW,CAAC7B,GAAZ,CAAgB,UAAU8B,GAAV,EAAe;MAC1C,IAAIC,qBAAJ,EAA2BC,gBAA3B;;MACA,OAAO,CAACD,qBAAqB,GAAG,CAACC,gBAAgB,GAAGtD,WAAW,CAACoD,GAAD,CAA/B,MAA0C,IAA1C,IAAkDE,gBAAgB,KAAK,KAAK,CAA5E,IAAiF,CAACA,gBAAgB,GAAGA,gBAAgB,CAACrB,IAArC,MAA+C,IAAhI,IAAwIqB,gBAAgB,KAAK,KAAK,CAAlK,GAAsK,KAAK,CAA3K,GAA+KA,gBAAgB,CAACpE,gBAAgB,CAACrE,KAAlB,CAAxN,MAAsP,IAAtP,IAA8PwI,qBAAqB,KAAK,KAAK,CAA7R,GAAiSA,qBAAjS,GAAyTD,GAAhU;IACD,CAHY,CAAb,CAL4C,CAU5C;;IACA,IAAIG,aAAa,GAAGlC,MAAM,CAACC,GAAP,CAAW,UAAUd,GAAV,EAAe;MAC5C,IAAIgD,UAAU,GAAGb,gBAAgB,CAACP,IAAjB,CAAsB,UAAUvB,IAAV,EAAgB;QACrD,OAAOA,IAAI,CAAChG,KAAL,KAAe2F,GAAtB;MACD,CAFgB,CAAjB;MAGA,IAAIiB,KAAJ,CAJ4C,CAK5C;;MACA,IAAInF,YAAY,IAAIkH,UAAU,CAAC/B,KAAX,KAAqBnC,SAAzC,EAAoD;QAClDmC,KAAK,GAAG+B,UAAU,CAAC/B,KAAnB;MACD,CAFD,MAEO,IAAI,CAACnF,YAAD,IAAiB4B,eAArB,EAAsC;QAC3CuD,KAAK,GAAGvD,eAAe,CAACsF,UAAD,CAAvB;MACD;;MACD,OAAO;QACL3I,KAAK,EAAE2F,GADF;QAELiB,KAAK,EAAEA;MAFF,CAAP;IAID,CAfmB,CAApB;IAgBA,IAAIgC,gBAAgB,GAAGlC,mBAAmB,CAACgC,aAAD,CAA1C;IACA,IAAIG,QAAQ,GAAGD,gBAAgB,CAAC,CAAD,CAA/B;;IACA,IAAI,CAACjF,cAAD,IAAmBkF,QAAnB,IAA+BjJ,KAAK,CAACiJ,QAAQ,CAAC7I,KAAV,CAApC,IAAwDJ,KAAK,CAACiJ,QAAQ,CAACjC,KAAV,CAAjE,EAAmF;MACjF,OAAO,EAAP;IACD;;IACD,OAAOgC,gBAAgB,CAACnC,GAAjB,CAAqB,UAAUT,IAAV,EAAgB;MAC1C,IAAI8C,WAAJ;;MACA,OAAO9K,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKgI,IAAL,CAAd,EAA0B,EAA1B,EAA8B;QAChDY,KAAK,EAAE,CAACkC,WAAW,GAAG9C,IAAI,CAACY,KAApB,MAA+B,IAA/B,IAAuCkC,WAAW,KAAK,KAAK,CAA5D,GAAgEA,WAAhE,GAA8E9C,IAAI,CAAChG;MAD1C,CAA9B,CAApB;IAGD,CALM,CAAP;EAMD,CAtCmB,EAsCjB,CAACqE,gBAAD,EAAmBV,cAAnB,EAAmCwE,gBAAnC,EAAqDL,gBAArD,EAAuEpB,mBAAvE,EAA4F1C,yBAA5F,EAAuHmB,WAAvH,CAtCiB,CAApB;;EAuCA,IAAI4D,SAAS,GAAGpK,QAAQ,CAAC0J,aAAD,CAAxB;EAAA,IACEW,UAAU,GAAG/K,cAAc,CAAC8K,SAAD,EAAY,CAAZ,CAD7B;EAAA,IAEEE,mBAAmB,GAAGD,UAAU,CAAC,CAAD,CAFlC,CA7QmE,CAiRnE;;;EACA,IAAIE,aAAa,GAAGnK,UAAU,CAAC,UAAUwG,YAAV,EAAwB4D,KAAxB,EAA+BC,MAA/B,EAAuC;IACpE,IAAIV,aAAa,GAAGhC,mBAAmB,CAACnB,YAAD,CAAvC;IACAxB,gBAAgB,CAAC2E,aAAD,CAAhB,CAFoE,CAIpE;;IACA,IAAI1H,oBAAJ,EAA0B;MACxB8D,cAAc,CAAC,EAAD,CAAd;IACD,CAPmE,CASpE;;;IACA,IAAIrE,QAAJ,EAAc;MACZ,IAAI4I,WAAW,GAAG9D,YAAlB;;MACA,IAAI/B,cAAJ,EAAoB;QAClB,IAAI8F,gBAAgB,GAAG/J,oBAAoB,CAACgG,YAAD,EAAevB,yBAAf,EAA0CmB,WAA1C,EAAuDd,gBAAvD,CAA3C;QACAgF,WAAW,GAAGC,gBAAgB,CAAC7C,GAAjB,CAAqB,UAAU8B,GAAV,EAAe;UAChD,IAAItB,MAAM,GAAG7B,aAAa,CAAC8B,GAAd,CAAkBqB,GAAlB,CAAb;UACA,OAAOtB,MAAM,GAAGA,MAAM,CAACG,IAAP,CAAY/C,gBAAgB,CAACrE,KAA7B,CAAH,GAAyCuI,GAAtD;QACD,CAHa,CAAd;MAID;;MACD,IAAIgB,IAAI,GAAGJ,KAAK,IAAI;QAChBK,YAAY,EAAE/E,SADE;QAEhBgF,QAAQ,EAAEhF;MAFM,CAApB;MAAA,IAIE+E,YAAY,GAAGD,IAAI,CAACC,YAJtB;MAAA,IAKEC,QAAQ,GAAGF,IAAI,CAACE,QALlB;;MAMA,IAAIC,eAAe,GAAGL,WAAtB,CAfY,CAiBZ;;MACA,IAAI7H,iBAAJ,EAAuB;QACrB,IAAImI,UAAU,GAAG5B,oBAAoB,CAAC6B,MAArB,CAA4B,UAAU5D,IAAV,EAAgB;UAC3D,OAAO,CAACqD,WAAW,CAACQ,QAAZ,CAAqB7D,IAAI,CAAChG,KAA1B,CAAR;QACD,CAFgB,CAAjB;QAGA0J,eAAe,GAAG,GAAGI,MAAH,CAAU/L,kBAAkB,CAAC2L,eAAD,CAA5B,EAA+C3L,kBAAkB,CAAC4L,UAAD,CAAjE,CAAlB;MACD;;MACD,IAAII,mBAAmB,GAAGrD,mBAAmB,CAACgD,eAAD,CAA7C;MACA,IAAIM,cAAc,GAAG;QACnB;QACAC,QAAQ,EAAEnC,gBAFS;QAGnB0B,YAAY,EAAEA;MAHK,CAArB,CAzBY,CA+BZ;MACA;MACA;;MACA,IAAIU,YAAY,GAAG,IAAnB;;MACA,IAAI1I,iBAAiB,IAAI4H,MAAM,KAAK,WAAX,IAA0B,CAACK,QAApD,EAA8D;QAC5DS,YAAY,GAAG,KAAf;MACD;;MACD7K,kBAAkB,CAAC2K,cAAD,EAAiBR,YAAjB,EAA+BjE,YAA/B,EAA6CN,cAA7C,EAA6DiF,YAA7D,EAA2E7F,gBAA3E,CAAlB;;MACA,IAAIZ,eAAJ,EAAqB;QACnBuG,cAAc,CAACG,OAAf,GAAyBV,QAAzB;MACD,CAFD,MAEO;QACLO,cAAc,CAACP,QAAf,GAA0BA,QAA1B;MACD;;MACD,IAAIW,YAAY,GAAG1G,kBAAkB,GAAGqG,mBAAH,GAAyBA,mBAAmB,CAACtD,GAApB,CAAwB,UAAUT,IAAV,EAAgB;QACpG,OAAOA,IAAI,CAAChG,KAAZ;MACD,CAF6D,CAA9D;MAGAS,QAAQ,CAACkD,cAAc,GAAGyG,YAAH,GAAkBA,YAAY,CAAC,CAAD,CAA7C,EAAkD1G,kBAAkB,GAAG,IAAH,GAAUqG,mBAAmB,CAACtD,GAApB,CAAwB,UAAUT,IAAV,EAAgB;QAC5H,OAAOA,IAAI,CAACY,KAAZ;MACD,CAFqF,CAA9E,EAEJoD,cAFI,CAAR;IAGD;EACF,CA7D6B,CAA9B,CAlRmE,CAiVnE;;EACA;;EACA,IAAIK,cAAc,GAAG3L,KAAK,CAAC4G,WAAN,CAAkB,UAAUgF,WAAV,EAAuBC,KAAvB,EAA8B;IACnE,IAAIC,qBAAJ;;IACA,IAAIf,QAAQ,GAAGc,KAAK,CAACd,QAArB;IAAA,IACEL,MAAM,GAAGmB,KAAK,CAACnB,MADjB;IAEA,IAAInC,MAAM,GAAG9B,WAAW,CAACmF,WAAD,CAAxB;IACA,IAAIlD,IAAI,GAAGH,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACG,IAAlE;IACA,IAAIqD,aAAa,GAAG,CAACD,qBAAqB,GAAGpD,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAAC/C,gBAAgB,CAACrE,KAAlB,CAAzE,MAAuG,IAAvG,IAA+GwK,qBAAqB,KAAK,KAAK,CAA9I,GAAkJA,qBAAlJ,GAA0KF,WAA9L,CANmE,CAQnE;;IACA,IAAI,CAAC3G,cAAL,EAAqB;MACnB;MACAuF,aAAa,CAAC,CAACuB,aAAD,CAAD,EAAkB;QAC7BhB,QAAQ,EAAE,IADmB;QAE7BD,YAAY,EAAEiB;MAFe,CAAlB,EAGV,QAHU,CAAb;IAID,CAND,MAMO;MACL,IAAIlF,YAAY,GAAGkE,QAAQ,GAAG,GAAGK,MAAH,CAAU/L,kBAAkB,CAACiK,SAAD,CAA5B,EAAyC,CAACyC,aAAD,CAAzC,CAAH,GAA+DtC,gBAAgB,CAACyB,MAAjB,CAAwB,UAAUc,CAAV,EAAa;QAC7H,OAAOA,CAAC,KAAKD,aAAb;MACD,CAFyF,CAA1F,CADK,CAKL;;MACA,IAAIjH,cAAJ,EAAoB;QAClB;QACA,IAAImH,eAAe,GAAGtF,cAAc,CAACE,YAAD,CAApC;QAAA,IACEC,gBAAgB,GAAGmF,eAAe,CAACnF,gBADrC;QAAA,IAEEC,cAAc,GAAGkF,eAAe,CAAClF,cAFnC;;QAGA,IAAImF,OAAO,GAAGnF,cAAc,CAACgB,GAAf,CAAmB,UAAUd,GAAV,EAAe;UAC9C,OAAOP,aAAa,CAAC8B,GAAd,CAAkBvB,GAAlB,EAAuB4C,GAA9B;QACD,CAFa,CAAd,CALkB,CASlB;;QACA,IAAIsC,WAAJ;;QACA,IAAIpB,QAAJ,EAAc;UACZ,IAAIqB,aAAa,GAAGvM,YAAY,CAACqM,OAAD,EAAU,IAAV,EAAgBzF,WAAhB,CAAhC;;UACA0F,WAAW,GAAGC,aAAa,CAACD,WAA5B;QACD,CAHD,MAGO;UACL,IAAIE,cAAc,GAAGxM,YAAY,CAACqM,OAAD,EAAU;YACzCT,OAAO,EAAE,KADgC;YAEzCa,eAAe,EAAE5C;UAFwB,CAAV,EAG9BjD,WAH8B,CAAjC;;UAIA0F,WAAW,GAAGE,cAAc,CAACF,WAA7B;QACD,CApBiB,CAsBlB;;;QACAtF,YAAY,GAAG,GAAGuE,MAAH,CAAU/L,kBAAkB,CAACyH,gBAAD,CAA5B,EAAgDzH,kBAAkB,CAAC8M,WAAW,CAACpE,GAAZ,CAAgB,UAAU8B,GAAV,EAAe;UAC/G,OAAOpD,WAAW,CAACoD,GAAD,CAAX,CAAiBnB,IAAjB,CAAsB/C,gBAAgB,CAACrE,KAAvC,CAAP;QACD,CAFiF,CAAD,CAAlE,CAAf;MAGD;;MACDkJ,aAAa,CAAC3D,YAAD,EAAe;QAC1BkE,QAAQ,EAAEA,QADgB;QAE1BD,YAAY,EAAEiB;MAFY,CAAf,EAGVrB,MAAM,IAAI,QAHA,CAAb;IAID,CApDkE,CAsDnE;;;IACA,IAAIK,QAAQ,IAAI,CAAC9F,cAAjB,EAAiC;MAC/BjD,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,IAA4CA,QAAQ,CAAC+J,aAAD,EAAgBnL,eAAe,CAAC8H,IAAD,CAA/B,CAApD;IACD,CAFD,MAEO;MACLzG,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,IAAgDA,UAAU,CAAC8J,aAAD,EAAgBnL,eAAe,CAAC8H,IAAD,CAA/B,CAA1D;IACD;EACF,CA5DoB,EA4DlB,CAAC/B,cAAD,EAAiBD,aAAjB,EAAgCD,WAAhC,EAA6Cd,gBAA7C,EAA+DV,cAA/D,EAA+EqE,SAA/E,EAA0FkB,aAA1F,EAAyG1F,cAAzG,EAAyH9C,QAAzH,EAAmIC,UAAnI,EAA+IwH,gBAA/I,EAAiKC,oBAAjK,CA5DkB,CAArB,CAnVmE,CAiZnE;;EACA,IAAI6C,+BAA+B,GAAGvM,KAAK,CAAC4G,WAAN,CAAkB,UAAU4F,IAAV,EAAgB;IACtE,IAAIrI,uBAAJ,EAA6B;MAC3B,IAAIsI,WAAW,GAAG,EAAlB;MACAC,MAAM,CAACC,cAAP,CAAsBF,WAAtB,EAAmC,oBAAnC,EAAyD;QACvDjE,GAAG,EAAE,SAASA,GAAT,GAAe;UAClBzI,OAAO,CAAC,KAAD,EAAQ,6DAAR,CAAP;UACA,OAAO,KAAP;QACD;MAJsD,CAAzD;MAMAoE,uBAAuB,CAACqI,IAAD,EAAOC,WAAP,CAAvB;IACD;EACF,CAXqC,EAWnC,CAACtI,uBAAD,CAXmC,CAAtC,CAlZmE,CA+ZnE;;EACA,IAAIyI,qBAAqB,GAAGvM,UAAU,CAAC,UAAUwM,SAAV,EAAqBC,IAArB,EAA2B;IAChE,IAAIjG,YAAY,GAAGgG,SAAS,CAAC9E,GAAV,CAAc,UAAUT,IAAV,EAAgB;MAC/C,OAAOA,IAAI,CAAChG,KAAZ;IACD,CAFkB,CAAnB;;IAGA,IAAIwL,IAAI,CAACC,IAAL,KAAc,OAAlB,EAA2B;MACzBvC,aAAa,CAAC3D,YAAD,EAAe,EAAf,EAAmB,WAAnB,CAAb;MACA;IACD,CAP+D,CAShE;;;IACA,IAAIiG,IAAI,CAAChF,MAAL,CAAYJ,MAAhB,EAAwB;MACtBiE,cAAc,CAACmB,IAAI,CAAChF,MAAL,CAAY,CAAZ,EAAexG,KAAhB,EAAuB;QACnCyJ,QAAQ,EAAE,KADyB;QAEnCL,MAAM,EAAE;MAF2B,CAAvB,CAAd;IAID;EACF,CAhBqC,CAAtC,CAhamE,CAkbnE;;EACA,IAAIsC,iBAAiB,GAAGhN,KAAK,CAACuF,OAAN,CAAc,YAAY;IAChD,OAAO;MACL3B,OAAO,EAAEA,OADJ;MAELS,wBAAwB,EAAEA,wBAFrB;MAGLP,UAAU,EAAEA,UAHP;MAILE,cAAc,EAAEA,cAJX;MAKLE,oBAAoB,EAAEA,oBALjB;MAMLhB,QAAQ,EAAEkE,gBANL;MAOLpE,UAAU,EAAE2C,gBAPP;MAQL3D,QAAQ,EAAE2J,cARL;MASLhI,gBAAgB,EAAEA,gBATb;MAULgB,eAAe,EAAEA;IAVZ,CAAP;EAYD,CAbuB,EAarB,CAACf,OAAD,EAAUS,wBAAV,EAAoCP,UAApC,EAAgDE,cAAhD,EAAgEE,oBAAhE,EAAsFkD,gBAAtF,EAAwGzB,gBAAxG,EAA0HgG,cAA1H,EAA0IhI,gBAA1I,EAA4JgB,eAA5J,CAbqB,CAAxB,CAnbmE,CAkcnE;;EACA,IAAIsI,aAAa,GAAGjN,KAAK,CAACuF,OAAN,CAAc,YAAY;IAC5C,OAAO;MACL2H,SAAS,EAAEnI,eADN;MAEL3B,QAAQ,EAAEA,QAFL;MAGLC,cAAc,EAAEA,cAHX;MAILC,UAAU,EAAEA,UAJP;MAKL6I,WAAW,EAAE1C,gBALR;MAML6C,eAAe,EAAE5C,oBANZ;MAOLnG,oBAAoB,EAAEA,oBAPjB;MAQLC,gBAAgB,EAAEA,gBARb;MASLC,uBAAuB,EAAEA,uBATpB;MAULC,YAAY,EAAEA,YAVT;MAWLa,QAAQ,EAAEA,QAXL;MAYLG,UAAU,EAAEA,UAZP;MAaLF,YAAY,EAAEA,YAbT;MAcLC,YAAY,EAAEA,YAdT;MAeLH,QAAQ,EAAEA,QAfL;MAgBL7B,kBAAkB,EAAEA,kBAhBf;MAiBLgE,WAAW,EAAEA;IAjBR,CAAP;EAmBD,CApBmB,EAoBjB,CAAC1B,eAAD,EAAkB3B,QAAlB,EAA4BC,cAA5B,EAA4CC,UAA5C,EAAwDmG,gBAAxD,EAA0EC,oBAA1E,EAAgGnG,oBAAhG,EAAsHC,gBAAtH,EAAwIC,uBAAxI,EAAiKC,YAAjK,EAA+Ka,QAA/K,EAAyLG,UAAzL,EAAqMF,YAArM,EAAmNC,YAAnN,EAAiOH,QAAjO,EAA2O7B,kBAA3O,EAA+PgE,WAA/P,CApBiB,CAApB,CAncmE,CAydnE;;EACA,OAAO,aAAazG,KAAK,CAACmN,aAAN,CAAoBzM,iBAAiB,CAAC0M,QAAtC,EAAgD;IAClE9L,KAAK,EAAE0L;EAD2D,CAAhD,EAEjB,aAAahN,KAAK,CAACmN,aAAN,CAAoB5M,aAAa,CAAC6M,QAAlC,EAA4C;IAC1D9L,KAAK,EAAE2L;EADmD,CAA5C,EAEb,aAAajN,KAAK,CAACmN,aAAN,CAAoBxN,UAApB,EAAgCP,QAAQ,CAAC;IACvDsC,GAAG,EAAEA;EADkD,CAAD,EAErDkD,SAFqD,EAE1C;IACZ;IACAjD,EAAE,EAAEkD,QAFQ;IAGZhD,SAAS,EAAEA,SAHC;IAIZwL,IAAI,EAAEpI,cAAc,GAAG,UAAH,GAAgBc,SAJxB,CAKZ;IALY;IAOZ4D,aAAa,EAAEY,mBAPH;IAQZqC,qBAAqB,EAAEA,qBARX,CASZ;IATY;IAWZ1K,WAAW,EAAEiE,iBAXD;IAYZ/D,QAAQ,EAAEiE,gBAZE,CAaZ;IAbY;IAeZ7F,UAAU,EAAEA,UAfA;IAgBZ8M,YAAY,EAAE,CAAC/G,cAAc,CAACmB,MAhBlB;IAiBZvD,uBAAuB,EAAEoI,+BAjBb;IAkBZlI,wBAAwB,EAAEA;EAlBd,CAF0C,CAAxC,CAFA,CAFI,CAApB;AA0BD,CApf6B,CAA9B,C,CAsfA;;AACA,IAAImB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzCnE,UAAU,CAACgM,WAAX,GAAyB,YAAzB;AACD;;AACD,IAAIC,iBAAiB,GAAGjM,UAAxB;AACAiM,iBAAiB,CAAC/M,QAAlB,GAA6BA,QAA7B;AACA+M,iBAAiB,CAAC1M,QAAlB,GAA6BA,QAA7B;AACA0M,iBAAiB,CAACxM,WAAlB,GAAgCA,WAAhC;AACAwM,iBAAiB,CAACzM,UAAlB,GAA+BA,UAA/B;AACA,eAAeyM,iBAAf"},"metadata":{},"sourceType":"module"}