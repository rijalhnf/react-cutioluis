{"ast":null,"code":"import { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  let {\n    generateColorPalettes,\n    generateNeutralColorPalettes\n  } = _ref;\n  const {\n    colorSuccess: colorSuccessBase,\n    colorWarning: colorWarningBase,\n    colorError: colorErrorBase,\n    colorInfo: colorInfoBase,\n    colorPrimary: colorPrimaryBase,\n    colorBgBase,\n    colorTextBase\n  } = seed;\n  const primaryColors = generateColorPalettes(colorPrimaryBase);\n  const successColors = generateColorPalettes(colorSuccessBase);\n  const warningColors = generateColorPalettes(colorWarningBase);\n  const errorColors = generateColorPalettes(colorErrorBase);\n  const infoColors = generateColorPalettes(colorInfoBase);\n  const neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase); // Color Link\n\n  const colorLink = seed.colorLink || seed.colorInfo;\n  const linkColors = generateColorPalettes(colorLink);\n  return Object.assign(Object.assign({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[5],\n    colorError: errorColors[6],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorLinkHover: linkColors[4],\n    colorLink: linkColors[6],\n    colorLinkActive: linkColors[7],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}","map":{"version":3,"names":["TinyColor","genColorMapToken","seed","_ref","generateColorPalettes","generateNeutralColorPalettes","colorSuccess","colorSuccessBase","colorWarning","colorWarningBase","colorError","colorErrorBase","colorInfo","colorInfoBase","colorPrimary","colorPrimaryBase","colorBgBase","colorTextBase","primaryColors","successColors","warningColors","errorColors","infoColors","neutralColors","colorLink","linkColors","Object","assign","colorPrimaryBg","colorPrimaryBgHover","colorPrimaryBorder","colorPrimaryBorderHover","colorPrimaryHover","colorPrimaryActive","colorPrimaryTextHover","colorPrimaryText","colorPrimaryTextActive","colorSuccessBg","colorSuccessBgHover","colorSuccessBorder","colorSuccessBorderHover","colorSuccessHover","colorSuccessActive","colorSuccessTextHover","colorSuccessText","colorSuccessTextActive","colorErrorBg","colorErrorBgHover","colorErrorBorder","colorErrorBorderHover","colorErrorHover","colorErrorActive","colorErrorTextHover","colorErrorText","colorErrorTextActive","colorWarningBg","colorWarningBgHover","colorWarningBorder","colorWarningBorderHover","colorWarningHover","colorWarningActive","colorWarningTextHover","colorWarningText","colorWarningTextActive","colorInfoBg","colorInfoBgHover","colorInfoBorder","colorInfoBorderHover","colorInfoHover","colorInfoActive","colorInfoTextHover","colorInfoText","colorInfoTextActive","colorLinkHover","colorLinkActive","colorBgMask","setAlpha","toRgbString","colorWhite"],"sources":["/Users/joji/Documents/CODE/React/react-cutioluis/node_modules/antd/es/theme/themes/shared/genColorMapToken.js"],"sourcesContent":["import { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  let {\n    generateColorPalettes,\n    generateNeutralColorPalettes\n  } = _ref;\n  const {\n    colorSuccess: colorSuccessBase,\n    colorWarning: colorWarningBase,\n    colorError: colorErrorBase,\n    colorInfo: colorInfoBase,\n    colorPrimary: colorPrimaryBase,\n    colorBgBase,\n    colorTextBase\n  } = seed;\n  const primaryColors = generateColorPalettes(colorPrimaryBase);\n  const successColors = generateColorPalettes(colorSuccessBase);\n  const warningColors = generateColorPalettes(colorWarningBase);\n  const errorColors = generateColorPalettes(colorErrorBase);\n  const infoColors = generateColorPalettes(colorInfoBase);\n  const neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\n  // Color Link\n  const colorLink = seed.colorLink || seed.colorInfo;\n  const linkColors = generateColorPalettes(colorLink);\n  return Object.assign(Object.assign({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[5],\n    colorError: errorColors[6],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorLinkHover: linkColors[4],\n    colorLink: linkColors[6],\n    colorLinkActive: linkColors[7],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;EACnD,IAAI;IACFC,qBADE;IAEFC;EAFE,IAGAF,IAHJ;EAIA,MAAM;IACJG,YAAY,EAAEC,gBADV;IAEJC,YAAY,EAAEC,gBAFV;IAGJC,UAAU,EAAEC,cAHR;IAIJC,SAAS,EAAEC,aAJP;IAKJC,YAAY,EAAEC,gBALV;IAMJC,WANI;IAOJC;EAPI,IAQFf,IARJ;EASA,MAAMgB,aAAa,GAAGd,qBAAqB,CAACW,gBAAD,CAA3C;EACA,MAAMI,aAAa,GAAGf,qBAAqB,CAACG,gBAAD,CAA3C;EACA,MAAMa,aAAa,GAAGhB,qBAAqB,CAACK,gBAAD,CAA3C;EACA,MAAMY,WAAW,GAAGjB,qBAAqB,CAACO,cAAD,CAAzC;EACA,MAAMW,UAAU,GAAGlB,qBAAqB,CAACS,aAAD,CAAxC;EACA,MAAMU,aAAa,GAAGlB,4BAA4B,CAACW,WAAD,EAAcC,aAAd,CAAlD,CAnBmD,CAoBnD;;EACA,MAAMO,SAAS,GAAGtB,IAAI,CAACsB,SAAL,IAAkBtB,IAAI,CAACU,SAAzC;EACA,MAAMa,UAAU,GAAGrB,qBAAqB,CAACoB,SAAD,CAAxC;EACA,OAAOE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,aAAlB,CAAd,EAAgD;IACrDK,cAAc,EAAEV,aAAa,CAAC,CAAD,CADwB;IAErDW,mBAAmB,EAAEX,aAAa,CAAC,CAAD,CAFmB;IAGrDY,kBAAkB,EAAEZ,aAAa,CAAC,CAAD,CAHoB;IAIrDa,uBAAuB,EAAEb,aAAa,CAAC,CAAD,CAJe;IAKrDc,iBAAiB,EAAEd,aAAa,CAAC,CAAD,CALqB;IAMrDJ,YAAY,EAAEI,aAAa,CAAC,CAAD,CAN0B;IAOrDe,kBAAkB,EAAEf,aAAa,CAAC,CAAD,CAPoB;IAQrDgB,qBAAqB,EAAEhB,aAAa,CAAC,CAAD,CARiB;IASrDiB,gBAAgB,EAAEjB,aAAa,CAAC,CAAD,CATsB;IAUrDkB,sBAAsB,EAAElB,aAAa,CAAC,EAAD,CAVgB;IAWrDmB,cAAc,EAAElB,aAAa,CAAC,CAAD,CAXwB;IAYrDmB,mBAAmB,EAAEnB,aAAa,CAAC,CAAD,CAZmB;IAarDoB,kBAAkB,EAAEpB,aAAa,CAAC,CAAD,CAboB;IAcrDqB,uBAAuB,EAAErB,aAAa,CAAC,CAAD,CAde;IAerDsB,iBAAiB,EAAEtB,aAAa,CAAC,CAAD,CAfqB;IAgBrDb,YAAY,EAAEa,aAAa,CAAC,CAAD,CAhB0B;IAiBrDuB,kBAAkB,EAAEvB,aAAa,CAAC,CAAD,CAjBoB;IAkBrDwB,qBAAqB,EAAExB,aAAa,CAAC,CAAD,CAlBiB;IAmBrDyB,gBAAgB,EAAEzB,aAAa,CAAC,CAAD,CAnBsB;IAoBrD0B,sBAAsB,EAAE1B,aAAa,CAAC,EAAD,CApBgB;IAqBrD2B,YAAY,EAAEzB,WAAW,CAAC,CAAD,CArB4B;IAsBrD0B,iBAAiB,EAAE1B,WAAW,CAAC,CAAD,CAtBuB;IAuBrD2B,gBAAgB,EAAE3B,WAAW,CAAC,CAAD,CAvBwB;IAwBrD4B,qBAAqB,EAAE5B,WAAW,CAAC,CAAD,CAxBmB;IAyBrD6B,eAAe,EAAE7B,WAAW,CAAC,CAAD,CAzByB;IA0BrDX,UAAU,EAAEW,WAAW,CAAC,CAAD,CA1B8B;IA2BrD8B,gBAAgB,EAAE9B,WAAW,CAAC,CAAD,CA3BwB;IA4BrD+B,mBAAmB,EAAE/B,WAAW,CAAC,CAAD,CA5BqB;IA6BrDgC,cAAc,EAAEhC,WAAW,CAAC,CAAD,CA7B0B;IA8BrDiC,oBAAoB,EAAEjC,WAAW,CAAC,EAAD,CA9BoB;IA+BrDkC,cAAc,EAAEnC,aAAa,CAAC,CAAD,CA/BwB;IAgCrDoC,mBAAmB,EAAEpC,aAAa,CAAC,CAAD,CAhCmB;IAiCrDqC,kBAAkB,EAAErC,aAAa,CAAC,CAAD,CAjCoB;IAkCrDsC,uBAAuB,EAAEtC,aAAa,CAAC,CAAD,CAlCe;IAmCrDuC,iBAAiB,EAAEvC,aAAa,CAAC,CAAD,CAnCqB;IAoCrDZ,YAAY,EAAEY,aAAa,CAAC,CAAD,CApC0B;IAqCrDwC,kBAAkB,EAAExC,aAAa,CAAC,CAAD,CArCoB;IAsCrDyC,qBAAqB,EAAEzC,aAAa,CAAC,CAAD,CAtCiB;IAuCrD0C,gBAAgB,EAAE1C,aAAa,CAAC,CAAD,CAvCsB;IAwCrD2C,sBAAsB,EAAE3C,aAAa,CAAC,EAAD,CAxCgB;IAyCrD4C,WAAW,EAAE1C,UAAU,CAAC,CAAD,CAzC8B;IA0CrD2C,gBAAgB,EAAE3C,UAAU,CAAC,CAAD,CA1CyB;IA2CrD4C,eAAe,EAAE5C,UAAU,CAAC,CAAD,CA3C0B;IA4CrD6C,oBAAoB,EAAE7C,UAAU,CAAC,CAAD,CA5CqB;IA6CrD8C,cAAc,EAAE9C,UAAU,CAAC,CAAD,CA7C2B;IA8CrDV,SAAS,EAAEU,UAAU,CAAC,CAAD,CA9CgC;IA+CrD+C,eAAe,EAAE/C,UAAU,CAAC,CAAD,CA/C0B;IAgDrDgD,kBAAkB,EAAEhD,UAAU,CAAC,CAAD,CAhDuB;IAiDrDiD,aAAa,EAAEjD,UAAU,CAAC,CAAD,CAjD4B;IAkDrDkD,mBAAmB,EAAElD,UAAU,CAAC,EAAD,CAlDsB;IAmDrDmD,cAAc,EAAEhD,UAAU,CAAC,CAAD,CAnD2B;IAoDrDD,SAAS,EAAEC,UAAU,CAAC,CAAD,CApDgC;IAqDrDiD,eAAe,EAAEjD,UAAU,CAAC,CAAD,CArD0B;IAsDrDkD,WAAW,EAAE,IAAI3E,SAAJ,CAAc,MAAd,EAAsB4E,QAAtB,CAA+B,IAA/B,EAAqCC,WAArC,EAtDwC;IAuDrDC,UAAU,EAAE;EAvDyC,CAAhD,CAAP;AAyDD"},"metadata":{},"sourceType":"module"}