{"ast":null,"code":"import { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\n\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  let exceed = false;\n\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    exceed = span !== undefined;\n  }\n\n  return [clone, exceed];\n} // Calculate the sum of span in a row\n\n\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  let exceed = false;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1; // Additional handle last one\n\n    if (index === rowItems.length - 1) {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, span);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      return;\n    }\n\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, mergedSpan);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return [rows, exceed];\n}\n\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n\n  return rows;\n};\n\nexport default useRow;","map":{"version":3,"names":["useMemo","devUseWarning","getFilledItem","rowItem","rowRestCol","span","clone","exceed","undefined","Object","assign","getCalcRows","rowItems","mergedColumn","rows","tmpRow","filter","n","forEach","index","mergedSpan","length","item","itemExceed","push","useRow","items","process","env","NODE_ENV","warning"],"sources":["/Users/joji/Downloads/react-cutioluis-main copy/node_modules/antd/es/descriptions/hooks/useRow.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  let exceed = false;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    exceed = span !== undefined;\n  }\n  return [clone, exceed];\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  let exceed = false;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, span);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, mergedSpan);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nexport default useRow;"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,aAAT,QAA8B,qBAA9B;;AACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,UAAhC,EAA4CC,IAA5C,EAAkD;EAChD,IAAIC,KAAK,GAAGH,OAAZ;EACA,IAAII,MAAM,GAAG,KAAb;;EACA,IAAIF,IAAI,KAAKG,SAAT,IAAsBH,IAAI,GAAGD,UAAjC,EAA6C;IAC3CE,KAAK,GAAGG,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,OAAlB,CAAd,EAA0C;MAChDE,IAAI,EAAED;IAD0C,CAA1C,CAAR;IAGAG,MAAM,GAAGF,IAAI,KAAKG,SAAlB;EACD;;EACD,OAAO,CAACF,KAAD,EAAQC,MAAR,CAAP;AACD,C,CACD;;;AACA,SAASI,WAAT,CAAqBC,QAArB,EAA+BC,YAA/B,EAA6C;EAC3C,MAAMC,IAAI,GAAG,EAAb;EACA,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIX,UAAU,GAAGS,YAAjB;EACA,IAAIN,MAAM,GAAG,KAAb;EACAK,QAAQ,CAACI,MAAT,CAAgBC,CAAC,IAAIA,CAArB,EAAwBC,OAAxB,CAAgC,CAACf,OAAD,EAAUgB,KAAV,KAAoB;IAClD,MAAMd,IAAI,GAAGF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACE,IAAvE;IACA,MAAMe,UAAU,GAAGf,IAAI,IAAI,CAA3B,CAFkD,CAGlD;;IACA,IAAIc,KAAK,KAAKP,QAAQ,CAACS,MAAT,GAAkB,CAAhC,EAAmC;MACjC,MAAM,CAACC,IAAD,EAAOC,UAAP,IAAqBrB,aAAa,CAACC,OAAD,EAAUC,UAAV,EAAsBC,IAAtB,CAAxC;MACAE,MAAM,GAAGA,MAAM,IAAIgB,UAAnB;MACAR,MAAM,CAACS,IAAP,CAAYF,IAAZ;MACAR,IAAI,CAACU,IAAL,CAAUT,MAAV;MACA;IACD;;IACD,IAAIK,UAAU,GAAGhB,UAAjB,EAA6B;MAC3BA,UAAU,IAAIgB,UAAd;MACAL,MAAM,CAACS,IAAP,CAAYrB,OAAZ;IACD,CAHD,MAGO;MACL,MAAM,CAACmB,IAAD,EAAOC,UAAP,IAAqBrB,aAAa,CAACC,OAAD,EAAUC,UAAV,EAAsBgB,UAAtB,CAAxC;MACAb,MAAM,GAAGA,MAAM,IAAIgB,UAAnB;MACAR,MAAM,CAACS,IAAP,CAAYF,IAAZ;MACAR,IAAI,CAACU,IAAL,CAAUT,MAAV;MACAX,UAAU,GAAGS,YAAb;MACAE,MAAM,GAAG,EAAT;IACD;EACF,CAtBD;EAuBA,OAAO,CAACD,IAAD,EAAOP,MAAP,CAAP;AACD;;AACD,MAAMkB,MAAM,GAAG,CAACZ,YAAD,EAAea,KAAf,KAAyB;EACtC,MAAM,CAACZ,IAAD,EAAOP,MAAP,IAAiBP,OAAO,CAAC,MAAMW,WAAW,CAACe,KAAD,EAAQb,YAAR,CAAlB,EAAyC,CAACa,KAAD,EAAQb,YAAR,CAAzC,CAA9B;;EACA,IAAIc,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,MAAMC,OAAO,GAAG7B,aAAa,CAAC,cAAD,CAA7B;IACA0B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCC,OAAO,CAAC,CAACvB,MAAF,EAAU,OAAV,EAAmB,oEAAnB,CAA/C,GAA0I,KAAK,CAA/I;EACD;;EACD,OAAOO,IAAP;AACD,CAPD;;AAQA,eAAeW,MAAf"},"metadata":{},"sourceType":"module"}